
stm32_contadorIT_GPIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002878  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08002984  08002984  00012984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080029ec  080029ec  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080029ec  080029ec  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080029ec  080029ec  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080029ec  080029ec  000129ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080029f0  080029f0  000129f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080029f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e8  20000070  08002a64  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000158  08002a64  00020158  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a639  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000017e3  00000000  00000000  0002a6d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b58  00000000  00000000  0002beb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a90  00000000  00000000  0002ca10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000178b8  00000000  00000000  0002d4a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008809  00000000  00000000  00044d58  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008a234  00000000  00000000  0004d561  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d7795  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003280  00000000  00000000  000d7810  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	0800296c 	.word	0x0800296c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	0800296c 	.word	0x0800296c

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 faf2 	bl	8000738 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f832 	bl	80001bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f8ee 	bl	8000338 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800015c:	f000 f8c2 	bl	80002e4 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8000160:	f000 f872 	bl	8000248 <MX_TIM4_Init>

  /* USER CODE BEGIN 2 */

  // Inicio el Timer2
  HAL_TIM_Base_Start_IT(&htim4);
 8000164:	480e      	ldr	r0, [pc, #56]	; (80001a0 <main+0x54>)
 8000166:	f001 fa67 	bl	8001638 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	length_buf = sprintf(buf,"%u\r\n",E_sw);
 800016a:	4b0e      	ldr	r3, [pc, #56]	; (80001a4 <main+0x58>)
 800016c:	781b      	ldrb	r3, [r3, #0]
 800016e:	461a      	mov	r2, r3
 8000170:	490d      	ldr	r1, [pc, #52]	; (80001a8 <main+0x5c>)
 8000172:	480e      	ldr	r0, [pc, #56]	; (80001ac <main+0x60>)
 8000174:	f001 ffe8 	bl	8002148 <siprintf>
 8000178:	4602      	mov	r2, r0
 800017a:	4b0d      	ldr	r3, [pc, #52]	; (80001b0 <main+0x64>)
 800017c:	601a      	str	r2, [r3, #0]
	if(print == 1)
 800017e:	4b0d      	ldr	r3, [pc, #52]	; (80001b4 <main+0x68>)
 8000180:	781b      	ldrb	r3, [r3, #0]
 8000182:	2b01      	cmp	r3, #1
 8000184:	d1f1      	bne.n	800016a <main+0x1e>
	{
		HAL_UART_Transmit(&huart1, (uint8_t *)buf, length_buf, 1000);
 8000186:	4b0a      	ldr	r3, [pc, #40]	; (80001b0 <main+0x64>)
 8000188:	681b      	ldr	r3, [r3, #0]
 800018a:	b29a      	uxth	r2, r3
 800018c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000190:	4906      	ldr	r1, [pc, #24]	; (80001ac <main+0x60>)
 8000192:	4809      	ldr	r0, [pc, #36]	; (80001b8 <main+0x6c>)
 8000194:	f001 fe3b 	bl	8001e0e <HAL_UART_Transmit>
		print = 0;
 8000198:	4b06      	ldr	r3, [pc, #24]	; (80001b4 <main+0x68>)
 800019a:	2200      	movs	r2, #0
 800019c:	701a      	strb	r2, [r3, #0]
	length_buf = sprintf(buf,"%u\r\n",E_sw);
 800019e:	e7e4      	b.n	800016a <main+0x1e>
 80001a0:	2000009c 	.word	0x2000009c
 80001a4:	20000128 	.word	0x20000128
 80001a8:	08002984 	.word	0x08002984
 80001ac:	2000012c 	.word	0x2000012c
 80001b0:	200000e4 	.word	0x200000e4
 80001b4:	2000008c 	.word	0x2000008c
 80001b8:	200000e8 	.word	0x200000e8

080001bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001bc:	b580      	push	{r7, lr}
 80001be:	b090      	sub	sp, #64	; 0x40
 80001c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001c2:	f107 0318 	add.w	r3, r7, #24
 80001c6:	2228      	movs	r2, #40	; 0x28
 80001c8:	2100      	movs	r1, #0
 80001ca:	4618      	mov	r0, r3
 80001cc:	f001 ffb4 	bl	8002138 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001d0:	1d3b      	adds	r3, r7, #4
 80001d2:	2200      	movs	r2, #0
 80001d4:	601a      	str	r2, [r3, #0]
 80001d6:	605a      	str	r2, [r3, #4]
 80001d8:	609a      	str	r2, [r3, #8]
 80001da:	60da      	str	r2, [r3, #12]
 80001dc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001de:	2301      	movs	r3, #1
 80001e0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001e6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001e8:	2300      	movs	r3, #0
 80001ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001ec:	2301      	movs	r3, #1
 80001ee:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001f0:	2302      	movs	r3, #2
 80001f2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001fa:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000200:	f107 0318 	add.w	r3, r7, #24
 8000204:	4618      	mov	r0, r3
 8000206:	f000 fdab 	bl	8000d60 <HAL_RCC_OscConfig>
 800020a:	4603      	mov	r3, r0
 800020c:	2b00      	cmp	r3, #0
 800020e:	d001      	beq.n	8000214 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000210:	f000 f942 	bl	8000498 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000214:	230f      	movs	r3, #15
 8000216:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000218:	2302      	movs	r3, #2
 800021a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800021c:	2300      	movs	r3, #0
 800021e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000220:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000224:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000226:	2300      	movs	r3, #0
 8000228:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800022a:	1d3b      	adds	r3, r7, #4
 800022c:	2102      	movs	r1, #2
 800022e:	4618      	mov	r0, r3
 8000230:	f001 f816 	bl	8001260 <HAL_RCC_ClockConfig>
 8000234:	4603      	mov	r3, r0
 8000236:	2b00      	cmp	r3, #0
 8000238:	d001      	beq.n	800023e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800023a:	f000 f92d 	bl	8000498 <Error_Handler>
  }
}
 800023e:	bf00      	nop
 8000240:	3740      	adds	r7, #64	; 0x40
 8000242:	46bd      	mov	sp, r7
 8000244:	bd80      	pop	{r7, pc}
	...

08000248 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b086      	sub	sp, #24
 800024c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800024e:	f107 0308 	add.w	r3, r7, #8
 8000252:	2200      	movs	r2, #0
 8000254:	601a      	str	r2, [r3, #0]
 8000256:	605a      	str	r2, [r3, #4]
 8000258:	609a      	str	r2, [r3, #8]
 800025a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800025c:	463b      	mov	r3, r7
 800025e:	2200      	movs	r2, #0
 8000260:	601a      	str	r2, [r3, #0]
 8000262:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000264:	4b1d      	ldr	r3, [pc, #116]	; (80002dc <MX_TIM4_Init+0x94>)
 8000266:	4a1e      	ldr	r2, [pc, #120]	; (80002e0 <MX_TIM4_Init+0x98>)
 8000268:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7200-1;
 800026a:	4b1c      	ldr	r3, [pc, #112]	; (80002dc <MX_TIM4_Init+0x94>)
 800026c:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000270:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000272:	4b1a      	ldr	r3, [pc, #104]	; (80002dc <MX_TIM4_Init+0x94>)
 8000274:	2200      	movs	r2, #0
 8000276:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000-1;
 8000278:	4b18      	ldr	r3, [pc, #96]	; (80002dc <MX_TIM4_Init+0x94>)
 800027a:	f242 720f 	movw	r2, #9999	; 0x270f
 800027e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000280:	4b16      	ldr	r3, [pc, #88]	; (80002dc <MX_TIM4_Init+0x94>)
 8000282:	2200      	movs	r2, #0
 8000284:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000286:	4b15      	ldr	r3, [pc, #84]	; (80002dc <MX_TIM4_Init+0x94>)
 8000288:	2200      	movs	r2, #0
 800028a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800028c:	4813      	ldr	r0, [pc, #76]	; (80002dc <MX_TIM4_Init+0x94>)
 800028e:	f001 f983 	bl	8001598 <HAL_TIM_Base_Init>
 8000292:	4603      	mov	r3, r0
 8000294:	2b00      	cmp	r3, #0
 8000296:	d001      	beq.n	800029c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8000298:	f000 f8fe 	bl	8000498 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800029c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80002a0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80002a2:	f107 0308 	add.w	r3, r7, #8
 80002a6:	4619      	mov	r1, r3
 80002a8:	480c      	ldr	r0, [pc, #48]	; (80002dc <MX_TIM4_Init+0x94>)
 80002aa:	f001 fb1f 	bl	80018ec <HAL_TIM_ConfigClockSource>
 80002ae:	4603      	mov	r3, r0
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d001      	beq.n	80002b8 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80002b4:	f000 f8f0 	bl	8000498 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80002b8:	2300      	movs	r3, #0
 80002ba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80002bc:	2300      	movs	r3, #0
 80002be:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80002c0:	463b      	mov	r3, r7
 80002c2:	4619      	mov	r1, r3
 80002c4:	4805      	ldr	r0, [pc, #20]	; (80002dc <MX_TIM4_Init+0x94>)
 80002c6:	f001 fce5 	bl	8001c94 <HAL_TIMEx_MasterConfigSynchronization>
 80002ca:	4603      	mov	r3, r0
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d001      	beq.n	80002d4 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80002d0:	f000 f8e2 	bl	8000498 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80002d4:	bf00      	nop
 80002d6:	3718      	adds	r7, #24
 80002d8:	46bd      	mov	sp, r7
 80002da:	bd80      	pop	{r7, pc}
 80002dc:	2000009c 	.word	0x2000009c
 80002e0:	40000800 	.word	0x40000800

080002e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80002e8:	4b11      	ldr	r3, [pc, #68]	; (8000330 <MX_USART1_UART_Init+0x4c>)
 80002ea:	4a12      	ldr	r2, [pc, #72]	; (8000334 <MX_USART1_UART_Init+0x50>)
 80002ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80002ee:	4b10      	ldr	r3, [pc, #64]	; (8000330 <MX_USART1_UART_Init+0x4c>)
 80002f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002f6:	4b0e      	ldr	r3, [pc, #56]	; (8000330 <MX_USART1_UART_Init+0x4c>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80002fc:	4b0c      	ldr	r3, [pc, #48]	; (8000330 <MX_USART1_UART_Init+0x4c>)
 80002fe:	2200      	movs	r2, #0
 8000300:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000302:	4b0b      	ldr	r3, [pc, #44]	; (8000330 <MX_USART1_UART_Init+0x4c>)
 8000304:	2200      	movs	r2, #0
 8000306:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000308:	4b09      	ldr	r3, [pc, #36]	; (8000330 <MX_USART1_UART_Init+0x4c>)
 800030a:	220c      	movs	r2, #12
 800030c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800030e:	4b08      	ldr	r3, [pc, #32]	; (8000330 <MX_USART1_UART_Init+0x4c>)
 8000310:	2200      	movs	r2, #0
 8000312:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000314:	4b06      	ldr	r3, [pc, #24]	; (8000330 <MX_USART1_UART_Init+0x4c>)
 8000316:	2200      	movs	r2, #0
 8000318:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800031a:	4805      	ldr	r0, [pc, #20]	; (8000330 <MX_USART1_UART_Init+0x4c>)
 800031c:	f001 fd2a 	bl	8001d74 <HAL_UART_Init>
 8000320:	4603      	mov	r3, r0
 8000322:	2b00      	cmp	r3, #0
 8000324:	d001      	beq.n	800032a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000326:	f000 f8b7 	bl	8000498 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800032a:	bf00      	nop
 800032c:	bd80      	pop	{r7, pc}
 800032e:	bf00      	nop
 8000330:	200000e8 	.word	0x200000e8
 8000334:	40013800 	.word	0x40013800

08000338 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b088      	sub	sp, #32
 800033c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800033e:	f107 0310 	add.w	r3, r7, #16
 8000342:	2200      	movs	r2, #0
 8000344:	601a      	str	r2, [r3, #0]
 8000346:	605a      	str	r2, [r3, #4]
 8000348:	609a      	str	r2, [r3, #8]
 800034a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800034c:	4b30      	ldr	r3, [pc, #192]	; (8000410 <MX_GPIO_Init+0xd8>)
 800034e:	699b      	ldr	r3, [r3, #24]
 8000350:	4a2f      	ldr	r2, [pc, #188]	; (8000410 <MX_GPIO_Init+0xd8>)
 8000352:	f043 0310 	orr.w	r3, r3, #16
 8000356:	6193      	str	r3, [r2, #24]
 8000358:	4b2d      	ldr	r3, [pc, #180]	; (8000410 <MX_GPIO_Init+0xd8>)
 800035a:	699b      	ldr	r3, [r3, #24]
 800035c:	f003 0310 	and.w	r3, r3, #16
 8000360:	60fb      	str	r3, [r7, #12]
 8000362:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000364:	4b2a      	ldr	r3, [pc, #168]	; (8000410 <MX_GPIO_Init+0xd8>)
 8000366:	699b      	ldr	r3, [r3, #24]
 8000368:	4a29      	ldr	r2, [pc, #164]	; (8000410 <MX_GPIO_Init+0xd8>)
 800036a:	f043 0320 	orr.w	r3, r3, #32
 800036e:	6193      	str	r3, [r2, #24]
 8000370:	4b27      	ldr	r3, [pc, #156]	; (8000410 <MX_GPIO_Init+0xd8>)
 8000372:	699b      	ldr	r3, [r3, #24]
 8000374:	f003 0320 	and.w	r3, r3, #32
 8000378:	60bb      	str	r3, [r7, #8]
 800037a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800037c:	4b24      	ldr	r3, [pc, #144]	; (8000410 <MX_GPIO_Init+0xd8>)
 800037e:	699b      	ldr	r3, [r3, #24]
 8000380:	4a23      	ldr	r2, [pc, #140]	; (8000410 <MX_GPIO_Init+0xd8>)
 8000382:	f043 0304 	orr.w	r3, r3, #4
 8000386:	6193      	str	r3, [r2, #24]
 8000388:	4b21      	ldr	r3, [pc, #132]	; (8000410 <MX_GPIO_Init+0xd8>)
 800038a:	699b      	ldr	r3, [r3, #24]
 800038c:	f003 0304 	and.w	r3, r3, #4
 8000390:	607b      	str	r3, [r7, #4]
 8000392:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000394:	2200      	movs	r2, #0
 8000396:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800039a:	481e      	ldr	r0, [pc, #120]	; (8000414 <MX_GPIO_Init+0xdc>)
 800039c:	f000 fc96 	bl	8000ccc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80003a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003a6:	2301      	movs	r3, #1
 80003a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003aa:	2300      	movs	r3, #0
 80003ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003ae:	2302      	movs	r3, #2
 80003b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80003b2:	f107 0310 	add.w	r3, r7, #16
 80003b6:	4619      	mov	r1, r3
 80003b8:	4816      	ldr	r0, [pc, #88]	; (8000414 <MX_GPIO_Init+0xdc>)
 80003ba:	f000 fb2d 	bl	8000a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : DT_Pin CLK_Pin SW_Pin */
  GPIO_InitStruct.Pin = DT_Pin|CLK_Pin|SW_Pin;
 80003be:	230e      	movs	r3, #14
 80003c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80003c2:	4b15      	ldr	r3, [pc, #84]	; (8000418 <MX_GPIO_Init+0xe0>)
 80003c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c6:	2300      	movs	r3, #0
 80003c8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003ca:	f107 0310 	add.w	r3, r7, #16
 80003ce:	4619      	mov	r1, r3
 80003d0:	4812      	ldr	r0, [pc, #72]	; (800041c <MX_GPIO_Init+0xe4>)
 80003d2:	f000 fb21 	bl	8000a18 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80003d6:	2200      	movs	r2, #0
 80003d8:	2100      	movs	r1, #0
 80003da:	2007      	movs	r0, #7
 80003dc:	f000 fae5 	bl	80009aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80003e0:	2007      	movs	r0, #7
 80003e2:	f000 fafe 	bl	80009e2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80003e6:	2200      	movs	r2, #0
 80003e8:	2100      	movs	r1, #0
 80003ea:	2008      	movs	r0, #8
 80003ec:	f000 fadd 	bl	80009aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80003f0:	2008      	movs	r0, #8
 80003f2:	f000 faf6 	bl	80009e2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80003f6:	2200      	movs	r2, #0
 80003f8:	2100      	movs	r1, #0
 80003fa:	2009      	movs	r0, #9
 80003fc:	f000 fad5 	bl	80009aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000400:	2009      	movs	r0, #9
 8000402:	f000 faee 	bl	80009e2 <HAL_NVIC_EnableIRQ>

}
 8000406:	bf00      	nop
 8000408:	3720      	adds	r7, #32
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	40021000 	.word	0x40021000
 8000414:	40011000 	.word	0x40011000
 8000418:	10210000 	.word	0x10210000
 800041c:	40010800 	.word	0x40010800

08000420 <HAL_GPIO_EXTI_Callback>:

// INTERRUPCIONES:

//Callback GPIOs:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000420:	b480      	push	{r7}
 8000422:	b083      	sub	sp, #12
 8000424:	af00      	add	r7, sp, #0
 8000426:	4603      	mov	r3, r0
 8000428:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == SW_Pin)
 800042a:	88fb      	ldrh	r3, [r7, #6]
 800042c:	2b08      	cmp	r3, #8
 800042e:	d105      	bne.n	800043c <HAL_GPIO_EXTI_Callback+0x1c>
	{
		E_sw = E_sw+1;
 8000430:	4b05      	ldr	r3, [pc, #20]	; (8000448 <HAL_GPIO_EXTI_Callback+0x28>)
 8000432:	781b      	ldrb	r3, [r3, #0]
 8000434:	3301      	adds	r3, #1
 8000436:	b2da      	uxtb	r2, r3
 8000438:	4b03      	ldr	r3, [pc, #12]	; (8000448 <HAL_GPIO_EXTI_Callback+0x28>)
 800043a:	701a      	strb	r2, [r3, #0]
	}
}
 800043c:	bf00      	nop
 800043e:	370c      	adds	r7, #12
 8000440:	46bd      	mov	sp, r7
 8000442:	bc80      	pop	{r7}
 8000444:	4770      	bx	lr
 8000446:	bf00      	nop
 8000448:	20000128 	.word	0x20000128

0800044c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b082      	sub	sp, #8
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
	if(htim == &htim4)
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	4a0b      	ldr	r2, [pc, #44]	; (8000484 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000458:	4293      	cmp	r3, r2
 800045a:	d10e      	bne.n	800047a <HAL_TIM_PeriodElapsedCallback+0x2e>
	{
		pulsos = E_sw; // Pulsos por segundo
 800045c:	4b0a      	ldr	r3, [pc, #40]	; (8000488 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800045e:	781a      	ldrb	r2, [r3, #0]
 8000460:	4b0a      	ldr	r3, [pc, #40]	; (800048c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000462:	701a      	strb	r2, [r3, #0]
		E_sw = 0; // Reseteo el contador
 8000464:	4b08      	ldr	r3, [pc, #32]	; (8000488 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000466:	2200      	movs	r2, #0
 8000468:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800046a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800046e:	4808      	ldr	r0, [pc, #32]	; (8000490 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000470:	f000 fc44 	bl	8000cfc <HAL_GPIO_TogglePin>
		print=1;
 8000474:	4b07      	ldr	r3, [pc, #28]	; (8000494 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000476:	2201      	movs	r2, #1
 8000478:	701a      	strb	r2, [r3, #0]
	}
}
 800047a:	bf00      	nop
 800047c:	3708      	adds	r7, #8
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}
 8000482:	bf00      	nop
 8000484:	2000009c 	.word	0x2000009c
 8000488:	20000128 	.word	0x20000128
 800048c:	2000014c 	.word	0x2000014c
 8000490:	40011000 	.word	0x40011000
 8000494:	2000008c 	.word	0x2000008c

08000498 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000498:	b480      	push	{r7}
 800049a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800049c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800049e:	e7fe      	b.n	800049e <Error_Handler+0x6>

080004a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004a0:	b480      	push	{r7}
 80004a2:	b085      	sub	sp, #20
 80004a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004a6:	4b15      	ldr	r3, [pc, #84]	; (80004fc <HAL_MspInit+0x5c>)
 80004a8:	699b      	ldr	r3, [r3, #24]
 80004aa:	4a14      	ldr	r2, [pc, #80]	; (80004fc <HAL_MspInit+0x5c>)
 80004ac:	f043 0301 	orr.w	r3, r3, #1
 80004b0:	6193      	str	r3, [r2, #24]
 80004b2:	4b12      	ldr	r3, [pc, #72]	; (80004fc <HAL_MspInit+0x5c>)
 80004b4:	699b      	ldr	r3, [r3, #24]
 80004b6:	f003 0301 	and.w	r3, r3, #1
 80004ba:	60bb      	str	r3, [r7, #8]
 80004bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004be:	4b0f      	ldr	r3, [pc, #60]	; (80004fc <HAL_MspInit+0x5c>)
 80004c0:	69db      	ldr	r3, [r3, #28]
 80004c2:	4a0e      	ldr	r2, [pc, #56]	; (80004fc <HAL_MspInit+0x5c>)
 80004c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004c8:	61d3      	str	r3, [r2, #28]
 80004ca:	4b0c      	ldr	r3, [pc, #48]	; (80004fc <HAL_MspInit+0x5c>)
 80004cc:	69db      	ldr	r3, [r3, #28]
 80004ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004d2:	607b      	str	r3, [r7, #4]
 80004d4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004d6:	4b0a      	ldr	r3, [pc, #40]	; (8000500 <HAL_MspInit+0x60>)
 80004d8:	685b      	ldr	r3, [r3, #4]
 80004da:	60fb      	str	r3, [r7, #12]
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004e2:	60fb      	str	r3, [r7, #12]
 80004e4:	68fb      	ldr	r3, [r7, #12]
 80004e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004ea:	60fb      	str	r3, [r7, #12]
 80004ec:	4a04      	ldr	r2, [pc, #16]	; (8000500 <HAL_MspInit+0x60>)
 80004ee:	68fb      	ldr	r3, [r7, #12]
 80004f0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004f2:	bf00      	nop
 80004f4:	3714      	adds	r7, #20
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bc80      	pop	{r7}
 80004fa:	4770      	bx	lr
 80004fc:	40021000 	.word	0x40021000
 8000500:	40010000 	.word	0x40010000

08000504 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b084      	sub	sp, #16
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	4a0d      	ldr	r2, [pc, #52]	; (8000548 <HAL_TIM_Base_MspInit+0x44>)
 8000512:	4293      	cmp	r3, r2
 8000514:	d113      	bne.n	800053e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000516:	4b0d      	ldr	r3, [pc, #52]	; (800054c <HAL_TIM_Base_MspInit+0x48>)
 8000518:	69db      	ldr	r3, [r3, #28]
 800051a:	4a0c      	ldr	r2, [pc, #48]	; (800054c <HAL_TIM_Base_MspInit+0x48>)
 800051c:	f043 0304 	orr.w	r3, r3, #4
 8000520:	61d3      	str	r3, [r2, #28]
 8000522:	4b0a      	ldr	r3, [pc, #40]	; (800054c <HAL_TIM_Base_MspInit+0x48>)
 8000524:	69db      	ldr	r3, [r3, #28]
 8000526:	f003 0304 	and.w	r3, r3, #4
 800052a:	60fb      	str	r3, [r7, #12]
 800052c:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800052e:	2200      	movs	r2, #0
 8000530:	2100      	movs	r1, #0
 8000532:	201e      	movs	r0, #30
 8000534:	f000 fa39 	bl	80009aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000538:	201e      	movs	r0, #30
 800053a:	f000 fa52 	bl	80009e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800053e:	bf00      	nop
 8000540:	3710      	adds	r7, #16
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	40000800 	.word	0x40000800
 800054c:	40021000 	.word	0x40021000

08000550 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b088      	sub	sp, #32
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000558:	f107 0310 	add.w	r3, r7, #16
 800055c:	2200      	movs	r2, #0
 800055e:	601a      	str	r2, [r3, #0]
 8000560:	605a      	str	r2, [r3, #4]
 8000562:	609a      	str	r2, [r3, #8]
 8000564:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	4a1c      	ldr	r2, [pc, #112]	; (80005dc <HAL_UART_MspInit+0x8c>)
 800056c:	4293      	cmp	r3, r2
 800056e:	d131      	bne.n	80005d4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000570:	4b1b      	ldr	r3, [pc, #108]	; (80005e0 <HAL_UART_MspInit+0x90>)
 8000572:	699b      	ldr	r3, [r3, #24]
 8000574:	4a1a      	ldr	r2, [pc, #104]	; (80005e0 <HAL_UART_MspInit+0x90>)
 8000576:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800057a:	6193      	str	r3, [r2, #24]
 800057c:	4b18      	ldr	r3, [pc, #96]	; (80005e0 <HAL_UART_MspInit+0x90>)
 800057e:	699b      	ldr	r3, [r3, #24]
 8000580:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000584:	60fb      	str	r3, [r7, #12]
 8000586:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000588:	4b15      	ldr	r3, [pc, #84]	; (80005e0 <HAL_UART_MspInit+0x90>)
 800058a:	699b      	ldr	r3, [r3, #24]
 800058c:	4a14      	ldr	r2, [pc, #80]	; (80005e0 <HAL_UART_MspInit+0x90>)
 800058e:	f043 0304 	orr.w	r3, r3, #4
 8000592:	6193      	str	r3, [r2, #24]
 8000594:	4b12      	ldr	r3, [pc, #72]	; (80005e0 <HAL_UART_MspInit+0x90>)
 8000596:	699b      	ldr	r3, [r3, #24]
 8000598:	f003 0304 	and.w	r3, r3, #4
 800059c:	60bb      	str	r3, [r7, #8]
 800059e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80005a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005a4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005a6:	2302      	movs	r3, #2
 80005a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005aa:	2303      	movs	r3, #3
 80005ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ae:	f107 0310 	add.w	r3, r7, #16
 80005b2:	4619      	mov	r1, r3
 80005b4:	480b      	ldr	r0, [pc, #44]	; (80005e4 <HAL_UART_MspInit+0x94>)
 80005b6:	f000 fa2f 	bl	8000a18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80005ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005c0:	2300      	movs	r3, #0
 80005c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c4:	2300      	movs	r3, #0
 80005c6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005c8:	f107 0310 	add.w	r3, r7, #16
 80005cc:	4619      	mov	r1, r3
 80005ce:	4805      	ldr	r0, [pc, #20]	; (80005e4 <HAL_UART_MspInit+0x94>)
 80005d0:	f000 fa22 	bl	8000a18 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80005d4:	bf00      	nop
 80005d6:	3720      	adds	r7, #32
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	40013800 	.word	0x40013800
 80005e0:	40021000 	.word	0x40021000
 80005e4:	40010800 	.word	0x40010800

080005e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005ec:	e7fe      	b.n	80005ec <NMI_Handler+0x4>

080005ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005ee:	b480      	push	{r7}
 80005f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005f2:	e7fe      	b.n	80005f2 <HardFault_Handler+0x4>

080005f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005f8:	e7fe      	b.n	80005f8 <MemManage_Handler+0x4>

080005fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005fa:	b480      	push	{r7}
 80005fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005fe:	e7fe      	b.n	80005fe <BusFault_Handler+0x4>

08000600 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000604:	e7fe      	b.n	8000604 <UsageFault_Handler+0x4>

08000606 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000606:	b480      	push	{r7}
 8000608:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800060a:	bf00      	nop
 800060c:	46bd      	mov	sp, r7
 800060e:	bc80      	pop	{r7}
 8000610:	4770      	bx	lr

08000612 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000612:	b480      	push	{r7}
 8000614:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000616:	bf00      	nop
 8000618:	46bd      	mov	sp, r7
 800061a:	bc80      	pop	{r7}
 800061c:	4770      	bx	lr

0800061e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800061e:	b480      	push	{r7}
 8000620:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000622:	bf00      	nop
 8000624:	46bd      	mov	sp, r7
 8000626:	bc80      	pop	{r7}
 8000628:	4770      	bx	lr

0800062a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800062a:	b580      	push	{r7, lr}
 800062c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800062e:	f000 f8c9 	bl	80007c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000632:	bf00      	nop
 8000634:	bd80      	pop	{r7, pc}

08000636 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000636:	b580      	push	{r7, lr}
 8000638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800063a:	2002      	movs	r0, #2
 800063c:	f000 fb78 	bl	8000d30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000640:	bf00      	nop
 8000642:	bd80      	pop	{r7, pc}

08000644 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000648:	2004      	movs	r0, #4
 800064a:	f000 fb71 	bl	8000d30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800064e:	bf00      	nop
 8000650:	bd80      	pop	{r7, pc}

08000652 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000652:	b580      	push	{r7, lr}
 8000654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000656:	2008      	movs	r0, #8
 8000658:	f000 fb6a 	bl	8000d30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800065c:	bf00      	nop
 800065e:	bd80      	pop	{r7, pc}

08000660 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000664:	4802      	ldr	r0, [pc, #8]	; (8000670 <TIM4_IRQHandler+0x10>)
 8000666:	f001 f839 	bl	80016dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800066a:	bf00      	nop
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	2000009c 	.word	0x2000009c

08000674 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b086      	sub	sp, #24
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800067c:	4a14      	ldr	r2, [pc, #80]	; (80006d0 <_sbrk+0x5c>)
 800067e:	4b15      	ldr	r3, [pc, #84]	; (80006d4 <_sbrk+0x60>)
 8000680:	1ad3      	subs	r3, r2, r3
 8000682:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000684:	697b      	ldr	r3, [r7, #20]
 8000686:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000688:	4b13      	ldr	r3, [pc, #76]	; (80006d8 <_sbrk+0x64>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d102      	bne.n	8000696 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000690:	4b11      	ldr	r3, [pc, #68]	; (80006d8 <_sbrk+0x64>)
 8000692:	4a12      	ldr	r2, [pc, #72]	; (80006dc <_sbrk+0x68>)
 8000694:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000696:	4b10      	ldr	r3, [pc, #64]	; (80006d8 <_sbrk+0x64>)
 8000698:	681a      	ldr	r2, [r3, #0]
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	4413      	add	r3, r2
 800069e:	693a      	ldr	r2, [r7, #16]
 80006a0:	429a      	cmp	r2, r3
 80006a2:	d207      	bcs.n	80006b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006a4:	f001 fd1e 	bl	80020e4 <__errno>
 80006a8:	4602      	mov	r2, r0
 80006aa:	230c      	movs	r3, #12
 80006ac:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80006ae:	f04f 33ff 	mov.w	r3, #4294967295
 80006b2:	e009      	b.n	80006c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006b4:	4b08      	ldr	r3, [pc, #32]	; (80006d8 <_sbrk+0x64>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006ba:	4b07      	ldr	r3, [pc, #28]	; (80006d8 <_sbrk+0x64>)
 80006bc:	681a      	ldr	r2, [r3, #0]
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	4413      	add	r3, r2
 80006c2:	4a05      	ldr	r2, [pc, #20]	; (80006d8 <_sbrk+0x64>)
 80006c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006c6:	68fb      	ldr	r3, [r7, #12]
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	3718      	adds	r7, #24
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	20005000 	.word	0x20005000
 80006d4:	00000400 	.word	0x00000400
 80006d8:	20000090 	.word	0x20000090
 80006dc:	20000158 	.word	0x20000158

080006e0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006e4:	bf00      	nop
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bc80      	pop	{r7}
 80006ea:	4770      	bx	lr

080006ec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80006ec:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80006ee:	e003      	b.n	80006f8 <LoopCopyDataInit>

080006f0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80006f0:	4b0b      	ldr	r3, [pc, #44]	; (8000720 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80006f2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80006f4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80006f6:	3104      	adds	r1, #4

080006f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80006f8:	480a      	ldr	r0, [pc, #40]	; (8000724 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80006fa:	4b0b      	ldr	r3, [pc, #44]	; (8000728 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80006fc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80006fe:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000700:	d3f6      	bcc.n	80006f0 <CopyDataInit>
  ldr r2, =_sbss
 8000702:	4a0a      	ldr	r2, [pc, #40]	; (800072c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000704:	e002      	b.n	800070c <LoopFillZerobss>

08000706 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000706:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000708:	f842 3b04 	str.w	r3, [r2], #4

0800070c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800070c:	4b08      	ldr	r3, [pc, #32]	; (8000730 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800070e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000710:	d3f9      	bcc.n	8000706 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000712:	f7ff ffe5 	bl	80006e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000716:	f001 fceb 	bl	80020f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800071a:	f7ff fd17 	bl	800014c <main>
  bx lr
 800071e:	4770      	bx	lr
  ldr r3, =_sidata
 8000720:	080029f4 	.word	0x080029f4
  ldr r0, =_sdata
 8000724:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000728:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 800072c:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8000730:	20000158 	.word	0x20000158

08000734 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000734:	e7fe      	b.n	8000734 <ADC1_2_IRQHandler>
	...

08000738 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800073c:	4b08      	ldr	r3, [pc, #32]	; (8000760 <HAL_Init+0x28>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a07      	ldr	r2, [pc, #28]	; (8000760 <HAL_Init+0x28>)
 8000742:	f043 0310 	orr.w	r3, r3, #16
 8000746:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000748:	2003      	movs	r0, #3
 800074a:	f000 f923 	bl	8000994 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800074e:	2000      	movs	r0, #0
 8000750:	f000 f808 	bl	8000764 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000754:	f7ff fea4 	bl	80004a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000758:	2300      	movs	r3, #0
}
 800075a:	4618      	mov	r0, r3
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	40022000 	.word	0x40022000

08000764 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800076c:	4b12      	ldr	r3, [pc, #72]	; (80007b8 <HAL_InitTick+0x54>)
 800076e:	681a      	ldr	r2, [r3, #0]
 8000770:	4b12      	ldr	r3, [pc, #72]	; (80007bc <HAL_InitTick+0x58>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	4619      	mov	r1, r3
 8000776:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800077a:	fbb3 f3f1 	udiv	r3, r3, r1
 800077e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000782:	4618      	mov	r0, r3
 8000784:	f000 f93b 	bl	80009fe <HAL_SYSTICK_Config>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800078e:	2301      	movs	r3, #1
 8000790:	e00e      	b.n	80007b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	2b0f      	cmp	r3, #15
 8000796:	d80a      	bhi.n	80007ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000798:	2200      	movs	r2, #0
 800079a:	6879      	ldr	r1, [r7, #4]
 800079c:	f04f 30ff 	mov.w	r0, #4294967295
 80007a0:	f000 f903 	bl	80009aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007a4:	4a06      	ldr	r2, [pc, #24]	; (80007c0 <HAL_InitTick+0x5c>)
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007aa:	2300      	movs	r3, #0
 80007ac:	e000      	b.n	80007b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007ae:	2301      	movs	r3, #1
}
 80007b0:	4618      	mov	r0, r3
 80007b2:	3708      	adds	r7, #8
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	20000000 	.word	0x20000000
 80007bc:	20000008 	.word	0x20000008
 80007c0:	20000004 	.word	0x20000004

080007c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007c8:	4b05      	ldr	r3, [pc, #20]	; (80007e0 <HAL_IncTick+0x1c>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	461a      	mov	r2, r3
 80007ce:	4b05      	ldr	r3, [pc, #20]	; (80007e4 <HAL_IncTick+0x20>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	4413      	add	r3, r2
 80007d4:	4a03      	ldr	r2, [pc, #12]	; (80007e4 <HAL_IncTick+0x20>)
 80007d6:	6013      	str	r3, [r2, #0]
}
 80007d8:	bf00      	nop
 80007da:	46bd      	mov	sp, r7
 80007dc:	bc80      	pop	{r7}
 80007de:	4770      	bx	lr
 80007e0:	20000008 	.word	0x20000008
 80007e4:	20000150 	.word	0x20000150

080007e8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  return uwTick;
 80007ec:	4b02      	ldr	r3, [pc, #8]	; (80007f8 <HAL_GetTick+0x10>)
 80007ee:	681b      	ldr	r3, [r3, #0]
}
 80007f0:	4618      	mov	r0, r3
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bc80      	pop	{r7}
 80007f6:	4770      	bx	lr
 80007f8:	20000150 	.word	0x20000150

080007fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b085      	sub	sp, #20
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	f003 0307 	and.w	r3, r3, #7
 800080a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800080c:	4b0c      	ldr	r3, [pc, #48]	; (8000840 <__NVIC_SetPriorityGrouping+0x44>)
 800080e:	68db      	ldr	r3, [r3, #12]
 8000810:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000812:	68ba      	ldr	r2, [r7, #8]
 8000814:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000818:	4013      	ands	r3, r2
 800081a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000820:	68bb      	ldr	r3, [r7, #8]
 8000822:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000824:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000828:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800082c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800082e:	4a04      	ldr	r2, [pc, #16]	; (8000840 <__NVIC_SetPriorityGrouping+0x44>)
 8000830:	68bb      	ldr	r3, [r7, #8]
 8000832:	60d3      	str	r3, [r2, #12]
}
 8000834:	bf00      	nop
 8000836:	3714      	adds	r7, #20
 8000838:	46bd      	mov	sp, r7
 800083a:	bc80      	pop	{r7}
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop
 8000840:	e000ed00 	.word	0xe000ed00

08000844 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000848:	4b04      	ldr	r3, [pc, #16]	; (800085c <__NVIC_GetPriorityGrouping+0x18>)
 800084a:	68db      	ldr	r3, [r3, #12]
 800084c:	0a1b      	lsrs	r3, r3, #8
 800084e:	f003 0307 	and.w	r3, r3, #7
}
 8000852:	4618      	mov	r0, r3
 8000854:	46bd      	mov	sp, r7
 8000856:	bc80      	pop	{r7}
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	e000ed00 	.word	0xe000ed00

08000860 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000860:	b480      	push	{r7}
 8000862:	b083      	sub	sp, #12
 8000864:	af00      	add	r7, sp, #0
 8000866:	4603      	mov	r3, r0
 8000868:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800086a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800086e:	2b00      	cmp	r3, #0
 8000870:	db0b      	blt.n	800088a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000872:	79fb      	ldrb	r3, [r7, #7]
 8000874:	f003 021f 	and.w	r2, r3, #31
 8000878:	4906      	ldr	r1, [pc, #24]	; (8000894 <__NVIC_EnableIRQ+0x34>)
 800087a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800087e:	095b      	lsrs	r3, r3, #5
 8000880:	2001      	movs	r0, #1
 8000882:	fa00 f202 	lsl.w	r2, r0, r2
 8000886:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800088a:	bf00      	nop
 800088c:	370c      	adds	r7, #12
 800088e:	46bd      	mov	sp, r7
 8000890:	bc80      	pop	{r7}
 8000892:	4770      	bx	lr
 8000894:	e000e100 	.word	0xe000e100

08000898 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000898:	b480      	push	{r7}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
 800089e:	4603      	mov	r3, r0
 80008a0:	6039      	str	r1, [r7, #0]
 80008a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	db0a      	blt.n	80008c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	b2da      	uxtb	r2, r3
 80008b0:	490c      	ldr	r1, [pc, #48]	; (80008e4 <__NVIC_SetPriority+0x4c>)
 80008b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008b6:	0112      	lsls	r2, r2, #4
 80008b8:	b2d2      	uxtb	r2, r2
 80008ba:	440b      	add	r3, r1
 80008bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008c0:	e00a      	b.n	80008d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	b2da      	uxtb	r2, r3
 80008c6:	4908      	ldr	r1, [pc, #32]	; (80008e8 <__NVIC_SetPriority+0x50>)
 80008c8:	79fb      	ldrb	r3, [r7, #7]
 80008ca:	f003 030f 	and.w	r3, r3, #15
 80008ce:	3b04      	subs	r3, #4
 80008d0:	0112      	lsls	r2, r2, #4
 80008d2:	b2d2      	uxtb	r2, r2
 80008d4:	440b      	add	r3, r1
 80008d6:	761a      	strb	r2, [r3, #24]
}
 80008d8:	bf00      	nop
 80008da:	370c      	adds	r7, #12
 80008dc:	46bd      	mov	sp, r7
 80008de:	bc80      	pop	{r7}
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	e000e100 	.word	0xe000e100
 80008e8:	e000ed00 	.word	0xe000ed00

080008ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b089      	sub	sp, #36	; 0x24
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	60f8      	str	r0, [r7, #12]
 80008f4:	60b9      	str	r1, [r7, #8]
 80008f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	f003 0307 	and.w	r3, r3, #7
 80008fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000900:	69fb      	ldr	r3, [r7, #28]
 8000902:	f1c3 0307 	rsb	r3, r3, #7
 8000906:	2b04      	cmp	r3, #4
 8000908:	bf28      	it	cs
 800090a:	2304      	movcs	r3, #4
 800090c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800090e:	69fb      	ldr	r3, [r7, #28]
 8000910:	3304      	adds	r3, #4
 8000912:	2b06      	cmp	r3, #6
 8000914:	d902      	bls.n	800091c <NVIC_EncodePriority+0x30>
 8000916:	69fb      	ldr	r3, [r7, #28]
 8000918:	3b03      	subs	r3, #3
 800091a:	e000      	b.n	800091e <NVIC_EncodePriority+0x32>
 800091c:	2300      	movs	r3, #0
 800091e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000920:	f04f 32ff 	mov.w	r2, #4294967295
 8000924:	69bb      	ldr	r3, [r7, #24]
 8000926:	fa02 f303 	lsl.w	r3, r2, r3
 800092a:	43da      	mvns	r2, r3
 800092c:	68bb      	ldr	r3, [r7, #8]
 800092e:	401a      	ands	r2, r3
 8000930:	697b      	ldr	r3, [r7, #20]
 8000932:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000934:	f04f 31ff 	mov.w	r1, #4294967295
 8000938:	697b      	ldr	r3, [r7, #20]
 800093a:	fa01 f303 	lsl.w	r3, r1, r3
 800093e:	43d9      	mvns	r1, r3
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000944:	4313      	orrs	r3, r2
         );
}
 8000946:	4618      	mov	r0, r3
 8000948:	3724      	adds	r7, #36	; 0x24
 800094a:	46bd      	mov	sp, r7
 800094c:	bc80      	pop	{r7}
 800094e:	4770      	bx	lr

08000950 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	3b01      	subs	r3, #1
 800095c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000960:	d301      	bcc.n	8000966 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000962:	2301      	movs	r3, #1
 8000964:	e00f      	b.n	8000986 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000966:	4a0a      	ldr	r2, [pc, #40]	; (8000990 <SysTick_Config+0x40>)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	3b01      	subs	r3, #1
 800096c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800096e:	210f      	movs	r1, #15
 8000970:	f04f 30ff 	mov.w	r0, #4294967295
 8000974:	f7ff ff90 	bl	8000898 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000978:	4b05      	ldr	r3, [pc, #20]	; (8000990 <SysTick_Config+0x40>)
 800097a:	2200      	movs	r2, #0
 800097c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800097e:	4b04      	ldr	r3, [pc, #16]	; (8000990 <SysTick_Config+0x40>)
 8000980:	2207      	movs	r2, #7
 8000982:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000984:	2300      	movs	r3, #0
}
 8000986:	4618      	mov	r0, r3
 8000988:	3708      	adds	r7, #8
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	e000e010 	.word	0xe000e010

08000994 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800099c:	6878      	ldr	r0, [r7, #4]
 800099e:	f7ff ff2d 	bl	80007fc <__NVIC_SetPriorityGrouping>
}
 80009a2:	bf00      	nop
 80009a4:	3708      	adds	r7, #8
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}

080009aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009aa:	b580      	push	{r7, lr}
 80009ac:	b086      	sub	sp, #24
 80009ae:	af00      	add	r7, sp, #0
 80009b0:	4603      	mov	r3, r0
 80009b2:	60b9      	str	r1, [r7, #8]
 80009b4:	607a      	str	r2, [r7, #4]
 80009b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009b8:	2300      	movs	r3, #0
 80009ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009bc:	f7ff ff42 	bl	8000844 <__NVIC_GetPriorityGrouping>
 80009c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009c2:	687a      	ldr	r2, [r7, #4]
 80009c4:	68b9      	ldr	r1, [r7, #8]
 80009c6:	6978      	ldr	r0, [r7, #20]
 80009c8:	f7ff ff90 	bl	80008ec <NVIC_EncodePriority>
 80009cc:	4602      	mov	r2, r0
 80009ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009d2:	4611      	mov	r1, r2
 80009d4:	4618      	mov	r0, r3
 80009d6:	f7ff ff5f 	bl	8000898 <__NVIC_SetPriority>
}
 80009da:	bf00      	nop
 80009dc:	3718      	adds	r7, #24
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}

080009e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009e2:	b580      	push	{r7, lr}
 80009e4:	b082      	sub	sp, #8
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	4603      	mov	r3, r0
 80009ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f0:	4618      	mov	r0, r3
 80009f2:	f7ff ff35 	bl	8000860 <__NVIC_EnableIRQ>
}
 80009f6:	bf00      	nop
 80009f8:	3708      	adds	r7, #8
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}

080009fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009fe:	b580      	push	{r7, lr}
 8000a00:	b082      	sub	sp, #8
 8000a02:	af00      	add	r7, sp, #0
 8000a04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a06:	6878      	ldr	r0, [r7, #4]
 8000a08:	f7ff ffa2 	bl	8000950 <SysTick_Config>
 8000a0c:	4603      	mov	r3, r0
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	3708      	adds	r7, #8
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
	...

08000a18 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b08b      	sub	sp, #44	; 0x2c
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
 8000a20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a22:	2300      	movs	r3, #0
 8000a24:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a26:	2300      	movs	r3, #0
 8000a28:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a2a:	e127      	b.n	8000c7c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a30:	fa02 f303 	lsl.w	r3, r2, r3
 8000a34:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	69fa      	ldr	r2, [r7, #28]
 8000a3c:	4013      	ands	r3, r2
 8000a3e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a40:	69ba      	ldr	r2, [r7, #24]
 8000a42:	69fb      	ldr	r3, [r7, #28]
 8000a44:	429a      	cmp	r2, r3
 8000a46:	f040 8116 	bne.w	8000c76 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	685b      	ldr	r3, [r3, #4]
 8000a4e:	2b12      	cmp	r3, #18
 8000a50:	d034      	beq.n	8000abc <HAL_GPIO_Init+0xa4>
 8000a52:	2b12      	cmp	r3, #18
 8000a54:	d80d      	bhi.n	8000a72 <HAL_GPIO_Init+0x5a>
 8000a56:	2b02      	cmp	r3, #2
 8000a58:	d02b      	beq.n	8000ab2 <HAL_GPIO_Init+0x9a>
 8000a5a:	2b02      	cmp	r3, #2
 8000a5c:	d804      	bhi.n	8000a68 <HAL_GPIO_Init+0x50>
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d031      	beq.n	8000ac6 <HAL_GPIO_Init+0xae>
 8000a62:	2b01      	cmp	r3, #1
 8000a64:	d01c      	beq.n	8000aa0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a66:	e048      	b.n	8000afa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000a68:	2b03      	cmp	r3, #3
 8000a6a:	d043      	beq.n	8000af4 <HAL_GPIO_Init+0xdc>
 8000a6c:	2b11      	cmp	r3, #17
 8000a6e:	d01b      	beq.n	8000aa8 <HAL_GPIO_Init+0x90>
          break;
 8000a70:	e043      	b.n	8000afa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000a72:	4a89      	ldr	r2, [pc, #548]	; (8000c98 <HAL_GPIO_Init+0x280>)
 8000a74:	4293      	cmp	r3, r2
 8000a76:	d026      	beq.n	8000ac6 <HAL_GPIO_Init+0xae>
 8000a78:	4a87      	ldr	r2, [pc, #540]	; (8000c98 <HAL_GPIO_Init+0x280>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d806      	bhi.n	8000a8c <HAL_GPIO_Init+0x74>
 8000a7e:	4a87      	ldr	r2, [pc, #540]	; (8000c9c <HAL_GPIO_Init+0x284>)
 8000a80:	4293      	cmp	r3, r2
 8000a82:	d020      	beq.n	8000ac6 <HAL_GPIO_Init+0xae>
 8000a84:	4a86      	ldr	r2, [pc, #536]	; (8000ca0 <HAL_GPIO_Init+0x288>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d01d      	beq.n	8000ac6 <HAL_GPIO_Init+0xae>
          break;
 8000a8a:	e036      	b.n	8000afa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000a8c:	4a85      	ldr	r2, [pc, #532]	; (8000ca4 <HAL_GPIO_Init+0x28c>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d019      	beq.n	8000ac6 <HAL_GPIO_Init+0xae>
 8000a92:	4a85      	ldr	r2, [pc, #532]	; (8000ca8 <HAL_GPIO_Init+0x290>)
 8000a94:	4293      	cmp	r3, r2
 8000a96:	d016      	beq.n	8000ac6 <HAL_GPIO_Init+0xae>
 8000a98:	4a84      	ldr	r2, [pc, #528]	; (8000cac <HAL_GPIO_Init+0x294>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d013      	beq.n	8000ac6 <HAL_GPIO_Init+0xae>
          break;
 8000a9e:	e02c      	b.n	8000afa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	68db      	ldr	r3, [r3, #12]
 8000aa4:	623b      	str	r3, [r7, #32]
          break;
 8000aa6:	e028      	b.n	8000afa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	68db      	ldr	r3, [r3, #12]
 8000aac:	3304      	adds	r3, #4
 8000aae:	623b      	str	r3, [r7, #32]
          break;
 8000ab0:	e023      	b.n	8000afa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	68db      	ldr	r3, [r3, #12]
 8000ab6:	3308      	adds	r3, #8
 8000ab8:	623b      	str	r3, [r7, #32]
          break;
 8000aba:	e01e      	b.n	8000afa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	68db      	ldr	r3, [r3, #12]
 8000ac0:	330c      	adds	r3, #12
 8000ac2:	623b      	str	r3, [r7, #32]
          break;
 8000ac4:	e019      	b.n	8000afa <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	689b      	ldr	r3, [r3, #8]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d102      	bne.n	8000ad4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ace:	2304      	movs	r3, #4
 8000ad0:	623b      	str	r3, [r7, #32]
          break;
 8000ad2:	e012      	b.n	8000afa <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	689b      	ldr	r3, [r3, #8]
 8000ad8:	2b01      	cmp	r3, #1
 8000ada:	d105      	bne.n	8000ae8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000adc:	2308      	movs	r3, #8
 8000ade:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	69fa      	ldr	r2, [r7, #28]
 8000ae4:	611a      	str	r2, [r3, #16]
          break;
 8000ae6:	e008      	b.n	8000afa <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ae8:	2308      	movs	r3, #8
 8000aea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	69fa      	ldr	r2, [r7, #28]
 8000af0:	615a      	str	r2, [r3, #20]
          break;
 8000af2:	e002      	b.n	8000afa <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000af4:	2300      	movs	r3, #0
 8000af6:	623b      	str	r3, [r7, #32]
          break;
 8000af8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000afa:	69bb      	ldr	r3, [r7, #24]
 8000afc:	2bff      	cmp	r3, #255	; 0xff
 8000afe:	d801      	bhi.n	8000b04 <HAL_GPIO_Init+0xec>
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	e001      	b.n	8000b08 <HAL_GPIO_Init+0xf0>
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	3304      	adds	r3, #4
 8000b08:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b0a:	69bb      	ldr	r3, [r7, #24]
 8000b0c:	2bff      	cmp	r3, #255	; 0xff
 8000b0e:	d802      	bhi.n	8000b16 <HAL_GPIO_Init+0xfe>
 8000b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b12:	009b      	lsls	r3, r3, #2
 8000b14:	e002      	b.n	8000b1c <HAL_GPIO_Init+0x104>
 8000b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b18:	3b08      	subs	r3, #8
 8000b1a:	009b      	lsls	r3, r3, #2
 8000b1c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	681a      	ldr	r2, [r3, #0]
 8000b22:	210f      	movs	r1, #15
 8000b24:	693b      	ldr	r3, [r7, #16]
 8000b26:	fa01 f303 	lsl.w	r3, r1, r3
 8000b2a:	43db      	mvns	r3, r3
 8000b2c:	401a      	ands	r2, r3
 8000b2e:	6a39      	ldr	r1, [r7, #32]
 8000b30:	693b      	ldr	r3, [r7, #16]
 8000b32:	fa01 f303 	lsl.w	r3, r1, r3
 8000b36:	431a      	orrs	r2, r3
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	f000 8096 	beq.w	8000c76 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b4a:	4b59      	ldr	r3, [pc, #356]	; (8000cb0 <HAL_GPIO_Init+0x298>)
 8000b4c:	699b      	ldr	r3, [r3, #24]
 8000b4e:	4a58      	ldr	r2, [pc, #352]	; (8000cb0 <HAL_GPIO_Init+0x298>)
 8000b50:	f043 0301 	orr.w	r3, r3, #1
 8000b54:	6193      	str	r3, [r2, #24]
 8000b56:	4b56      	ldr	r3, [pc, #344]	; (8000cb0 <HAL_GPIO_Init+0x298>)
 8000b58:	699b      	ldr	r3, [r3, #24]
 8000b5a:	f003 0301 	and.w	r3, r3, #1
 8000b5e:	60bb      	str	r3, [r7, #8]
 8000b60:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000b62:	4a54      	ldr	r2, [pc, #336]	; (8000cb4 <HAL_GPIO_Init+0x29c>)
 8000b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b66:	089b      	lsrs	r3, r3, #2
 8000b68:	3302      	adds	r3, #2
 8000b6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b6e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b72:	f003 0303 	and.w	r3, r3, #3
 8000b76:	009b      	lsls	r3, r3, #2
 8000b78:	220f      	movs	r2, #15
 8000b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7e:	43db      	mvns	r3, r3
 8000b80:	68fa      	ldr	r2, [r7, #12]
 8000b82:	4013      	ands	r3, r2
 8000b84:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	4a4b      	ldr	r2, [pc, #300]	; (8000cb8 <HAL_GPIO_Init+0x2a0>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d013      	beq.n	8000bb6 <HAL_GPIO_Init+0x19e>
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	4a4a      	ldr	r2, [pc, #296]	; (8000cbc <HAL_GPIO_Init+0x2a4>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d00d      	beq.n	8000bb2 <HAL_GPIO_Init+0x19a>
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	4a49      	ldr	r2, [pc, #292]	; (8000cc0 <HAL_GPIO_Init+0x2a8>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d007      	beq.n	8000bae <HAL_GPIO_Init+0x196>
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	4a48      	ldr	r2, [pc, #288]	; (8000cc4 <HAL_GPIO_Init+0x2ac>)
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d101      	bne.n	8000baa <HAL_GPIO_Init+0x192>
 8000ba6:	2303      	movs	r3, #3
 8000ba8:	e006      	b.n	8000bb8 <HAL_GPIO_Init+0x1a0>
 8000baa:	2304      	movs	r3, #4
 8000bac:	e004      	b.n	8000bb8 <HAL_GPIO_Init+0x1a0>
 8000bae:	2302      	movs	r3, #2
 8000bb0:	e002      	b.n	8000bb8 <HAL_GPIO_Init+0x1a0>
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	e000      	b.n	8000bb8 <HAL_GPIO_Init+0x1a0>
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000bba:	f002 0203 	and.w	r2, r2, #3
 8000bbe:	0092      	lsls	r2, r2, #2
 8000bc0:	4093      	lsls	r3, r2
 8000bc2:	68fa      	ldr	r2, [r7, #12]
 8000bc4:	4313      	orrs	r3, r2
 8000bc6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000bc8:	493a      	ldr	r1, [pc, #232]	; (8000cb4 <HAL_GPIO_Init+0x29c>)
 8000bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bcc:	089b      	lsrs	r3, r3, #2
 8000bce:	3302      	adds	r3, #2
 8000bd0:	68fa      	ldr	r2, [r7, #12]
 8000bd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d006      	beq.n	8000bf0 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000be2:	4b39      	ldr	r3, [pc, #228]	; (8000cc8 <HAL_GPIO_Init+0x2b0>)
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	4938      	ldr	r1, [pc, #224]	; (8000cc8 <HAL_GPIO_Init+0x2b0>)
 8000be8:	69bb      	ldr	r3, [r7, #24]
 8000bea:	4313      	orrs	r3, r2
 8000bec:	600b      	str	r3, [r1, #0]
 8000bee:	e006      	b.n	8000bfe <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000bf0:	4b35      	ldr	r3, [pc, #212]	; (8000cc8 <HAL_GPIO_Init+0x2b0>)
 8000bf2:	681a      	ldr	r2, [r3, #0]
 8000bf4:	69bb      	ldr	r3, [r7, #24]
 8000bf6:	43db      	mvns	r3, r3
 8000bf8:	4933      	ldr	r1, [pc, #204]	; (8000cc8 <HAL_GPIO_Init+0x2b0>)
 8000bfa:	4013      	ands	r3, r2
 8000bfc:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d006      	beq.n	8000c18 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c0a:	4b2f      	ldr	r3, [pc, #188]	; (8000cc8 <HAL_GPIO_Init+0x2b0>)
 8000c0c:	685a      	ldr	r2, [r3, #4]
 8000c0e:	492e      	ldr	r1, [pc, #184]	; (8000cc8 <HAL_GPIO_Init+0x2b0>)
 8000c10:	69bb      	ldr	r3, [r7, #24]
 8000c12:	4313      	orrs	r3, r2
 8000c14:	604b      	str	r3, [r1, #4]
 8000c16:	e006      	b.n	8000c26 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c18:	4b2b      	ldr	r3, [pc, #172]	; (8000cc8 <HAL_GPIO_Init+0x2b0>)
 8000c1a:	685a      	ldr	r2, [r3, #4]
 8000c1c:	69bb      	ldr	r3, [r7, #24]
 8000c1e:	43db      	mvns	r3, r3
 8000c20:	4929      	ldr	r1, [pc, #164]	; (8000cc8 <HAL_GPIO_Init+0x2b0>)
 8000c22:	4013      	ands	r3, r2
 8000c24:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d006      	beq.n	8000c40 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c32:	4b25      	ldr	r3, [pc, #148]	; (8000cc8 <HAL_GPIO_Init+0x2b0>)
 8000c34:	689a      	ldr	r2, [r3, #8]
 8000c36:	4924      	ldr	r1, [pc, #144]	; (8000cc8 <HAL_GPIO_Init+0x2b0>)
 8000c38:	69bb      	ldr	r3, [r7, #24]
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	608b      	str	r3, [r1, #8]
 8000c3e:	e006      	b.n	8000c4e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c40:	4b21      	ldr	r3, [pc, #132]	; (8000cc8 <HAL_GPIO_Init+0x2b0>)
 8000c42:	689a      	ldr	r2, [r3, #8]
 8000c44:	69bb      	ldr	r3, [r7, #24]
 8000c46:	43db      	mvns	r3, r3
 8000c48:	491f      	ldr	r1, [pc, #124]	; (8000cc8 <HAL_GPIO_Init+0x2b0>)
 8000c4a:	4013      	ands	r3, r2
 8000c4c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d006      	beq.n	8000c68 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c5a:	4b1b      	ldr	r3, [pc, #108]	; (8000cc8 <HAL_GPIO_Init+0x2b0>)
 8000c5c:	68da      	ldr	r2, [r3, #12]
 8000c5e:	491a      	ldr	r1, [pc, #104]	; (8000cc8 <HAL_GPIO_Init+0x2b0>)
 8000c60:	69bb      	ldr	r3, [r7, #24]
 8000c62:	4313      	orrs	r3, r2
 8000c64:	60cb      	str	r3, [r1, #12]
 8000c66:	e006      	b.n	8000c76 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c68:	4b17      	ldr	r3, [pc, #92]	; (8000cc8 <HAL_GPIO_Init+0x2b0>)
 8000c6a:	68da      	ldr	r2, [r3, #12]
 8000c6c:	69bb      	ldr	r3, [r7, #24]
 8000c6e:	43db      	mvns	r3, r3
 8000c70:	4915      	ldr	r1, [pc, #84]	; (8000cc8 <HAL_GPIO_Init+0x2b0>)
 8000c72:	4013      	ands	r3, r2
 8000c74:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c78:	3301      	adds	r3, #1
 8000c7a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	681a      	ldr	r2, [r3, #0]
 8000c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c82:	fa22 f303 	lsr.w	r3, r2, r3
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	f47f aed0 	bne.w	8000a2c <HAL_GPIO_Init+0x14>
  }
}
 8000c8c:	bf00      	nop
 8000c8e:	372c      	adds	r7, #44	; 0x2c
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bc80      	pop	{r7}
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	10210000 	.word	0x10210000
 8000c9c:	10110000 	.word	0x10110000
 8000ca0:	10120000 	.word	0x10120000
 8000ca4:	10310000 	.word	0x10310000
 8000ca8:	10320000 	.word	0x10320000
 8000cac:	10220000 	.word	0x10220000
 8000cb0:	40021000 	.word	0x40021000
 8000cb4:	40010000 	.word	0x40010000
 8000cb8:	40010800 	.word	0x40010800
 8000cbc:	40010c00 	.word	0x40010c00
 8000cc0:	40011000 	.word	0x40011000
 8000cc4:	40011400 	.word	0x40011400
 8000cc8:	40010400 	.word	0x40010400

08000ccc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
 8000cd4:	460b      	mov	r3, r1
 8000cd6:	807b      	strh	r3, [r7, #2]
 8000cd8:	4613      	mov	r3, r2
 8000cda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000cdc:	787b      	ldrb	r3, [r7, #1]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d003      	beq.n	8000cea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ce2:	887a      	ldrh	r2, [r7, #2]
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000ce8:	e003      	b.n	8000cf2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000cea:	887b      	ldrh	r3, [r7, #2]
 8000cec:	041a      	lsls	r2, r3, #16
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	611a      	str	r2, [r3, #16]
}
 8000cf2:	bf00      	nop
 8000cf4:	370c      	adds	r7, #12
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bc80      	pop	{r7}
 8000cfa:	4770      	bx	lr

08000cfc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b085      	sub	sp, #20
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
 8000d04:	460b      	mov	r3, r1
 8000d06:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	68db      	ldr	r3, [r3, #12]
 8000d0c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000d0e:	887a      	ldrh	r2, [r7, #2]
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	4013      	ands	r3, r2
 8000d14:	041a      	lsls	r2, r3, #16
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	43d9      	mvns	r1, r3
 8000d1a:	887b      	ldrh	r3, [r7, #2]
 8000d1c:	400b      	ands	r3, r1
 8000d1e:	431a      	orrs	r2, r3
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	611a      	str	r2, [r3, #16]
}
 8000d24:	bf00      	nop
 8000d26:	3714      	adds	r7, #20
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bc80      	pop	{r7}
 8000d2c:	4770      	bx	lr
	...

08000d30 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4603      	mov	r3, r0
 8000d38:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000d3a:	4b08      	ldr	r3, [pc, #32]	; (8000d5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000d3c:	695a      	ldr	r2, [r3, #20]
 8000d3e:	88fb      	ldrh	r3, [r7, #6]
 8000d40:	4013      	ands	r3, r2
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d006      	beq.n	8000d54 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000d46:	4a05      	ldr	r2, [pc, #20]	; (8000d5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000d48:	88fb      	ldrh	r3, [r7, #6]
 8000d4a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000d4c:	88fb      	ldrh	r3, [r7, #6]
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f7ff fb66 	bl	8000420 <HAL_GPIO_EXTI_Callback>
  }
}
 8000d54:	bf00      	nop
 8000d56:	3708      	adds	r7, #8
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	40010400 	.word	0x40010400

08000d60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b086      	sub	sp, #24
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d101      	bne.n	8000d72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	e26c      	b.n	800124c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f003 0301 	and.w	r3, r3, #1
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	f000 8087 	beq.w	8000e8e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d80:	4b92      	ldr	r3, [pc, #584]	; (8000fcc <HAL_RCC_OscConfig+0x26c>)
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	f003 030c 	and.w	r3, r3, #12
 8000d88:	2b04      	cmp	r3, #4
 8000d8a:	d00c      	beq.n	8000da6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d8c:	4b8f      	ldr	r3, [pc, #572]	; (8000fcc <HAL_RCC_OscConfig+0x26c>)
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	f003 030c 	and.w	r3, r3, #12
 8000d94:	2b08      	cmp	r3, #8
 8000d96:	d112      	bne.n	8000dbe <HAL_RCC_OscConfig+0x5e>
 8000d98:	4b8c      	ldr	r3, [pc, #560]	; (8000fcc <HAL_RCC_OscConfig+0x26c>)
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000da0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000da4:	d10b      	bne.n	8000dbe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000da6:	4b89      	ldr	r3, [pc, #548]	; (8000fcc <HAL_RCC_OscConfig+0x26c>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d06c      	beq.n	8000e8c <HAL_RCC_OscConfig+0x12c>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d168      	bne.n	8000e8c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	e246      	b.n	800124c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000dc6:	d106      	bne.n	8000dd6 <HAL_RCC_OscConfig+0x76>
 8000dc8:	4b80      	ldr	r3, [pc, #512]	; (8000fcc <HAL_RCC_OscConfig+0x26c>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a7f      	ldr	r2, [pc, #508]	; (8000fcc <HAL_RCC_OscConfig+0x26c>)
 8000dce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dd2:	6013      	str	r3, [r2, #0]
 8000dd4:	e02e      	b.n	8000e34 <HAL_RCC_OscConfig+0xd4>
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d10c      	bne.n	8000df8 <HAL_RCC_OscConfig+0x98>
 8000dde:	4b7b      	ldr	r3, [pc, #492]	; (8000fcc <HAL_RCC_OscConfig+0x26c>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a7a      	ldr	r2, [pc, #488]	; (8000fcc <HAL_RCC_OscConfig+0x26c>)
 8000de4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000de8:	6013      	str	r3, [r2, #0]
 8000dea:	4b78      	ldr	r3, [pc, #480]	; (8000fcc <HAL_RCC_OscConfig+0x26c>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4a77      	ldr	r2, [pc, #476]	; (8000fcc <HAL_RCC_OscConfig+0x26c>)
 8000df0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000df4:	6013      	str	r3, [r2, #0]
 8000df6:	e01d      	b.n	8000e34 <HAL_RCC_OscConfig+0xd4>
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e00:	d10c      	bne.n	8000e1c <HAL_RCC_OscConfig+0xbc>
 8000e02:	4b72      	ldr	r3, [pc, #456]	; (8000fcc <HAL_RCC_OscConfig+0x26c>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4a71      	ldr	r2, [pc, #452]	; (8000fcc <HAL_RCC_OscConfig+0x26c>)
 8000e08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e0c:	6013      	str	r3, [r2, #0]
 8000e0e:	4b6f      	ldr	r3, [pc, #444]	; (8000fcc <HAL_RCC_OscConfig+0x26c>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a6e      	ldr	r2, [pc, #440]	; (8000fcc <HAL_RCC_OscConfig+0x26c>)
 8000e14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e18:	6013      	str	r3, [r2, #0]
 8000e1a:	e00b      	b.n	8000e34 <HAL_RCC_OscConfig+0xd4>
 8000e1c:	4b6b      	ldr	r3, [pc, #428]	; (8000fcc <HAL_RCC_OscConfig+0x26c>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a6a      	ldr	r2, [pc, #424]	; (8000fcc <HAL_RCC_OscConfig+0x26c>)
 8000e22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e26:	6013      	str	r3, [r2, #0]
 8000e28:	4b68      	ldr	r3, [pc, #416]	; (8000fcc <HAL_RCC_OscConfig+0x26c>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a67      	ldr	r2, [pc, #412]	; (8000fcc <HAL_RCC_OscConfig+0x26c>)
 8000e2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e32:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d013      	beq.n	8000e64 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e3c:	f7ff fcd4 	bl	80007e8 <HAL_GetTick>
 8000e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e42:	e008      	b.n	8000e56 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e44:	f7ff fcd0 	bl	80007e8 <HAL_GetTick>
 8000e48:	4602      	mov	r2, r0
 8000e4a:	693b      	ldr	r3, [r7, #16]
 8000e4c:	1ad3      	subs	r3, r2, r3
 8000e4e:	2b64      	cmp	r3, #100	; 0x64
 8000e50:	d901      	bls.n	8000e56 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000e52:	2303      	movs	r3, #3
 8000e54:	e1fa      	b.n	800124c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e56:	4b5d      	ldr	r3, [pc, #372]	; (8000fcc <HAL_RCC_OscConfig+0x26c>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d0f0      	beq.n	8000e44 <HAL_RCC_OscConfig+0xe4>
 8000e62:	e014      	b.n	8000e8e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e64:	f7ff fcc0 	bl	80007e8 <HAL_GetTick>
 8000e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e6a:	e008      	b.n	8000e7e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e6c:	f7ff fcbc 	bl	80007e8 <HAL_GetTick>
 8000e70:	4602      	mov	r2, r0
 8000e72:	693b      	ldr	r3, [r7, #16]
 8000e74:	1ad3      	subs	r3, r2, r3
 8000e76:	2b64      	cmp	r3, #100	; 0x64
 8000e78:	d901      	bls.n	8000e7e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000e7a:	2303      	movs	r3, #3
 8000e7c:	e1e6      	b.n	800124c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e7e:	4b53      	ldr	r3, [pc, #332]	; (8000fcc <HAL_RCC_OscConfig+0x26c>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d1f0      	bne.n	8000e6c <HAL_RCC_OscConfig+0x10c>
 8000e8a:	e000      	b.n	8000e8e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f003 0302 	and.w	r3, r3, #2
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d063      	beq.n	8000f62 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e9a:	4b4c      	ldr	r3, [pc, #304]	; (8000fcc <HAL_RCC_OscConfig+0x26c>)
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	f003 030c 	and.w	r3, r3, #12
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d00b      	beq.n	8000ebe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000ea6:	4b49      	ldr	r3, [pc, #292]	; (8000fcc <HAL_RCC_OscConfig+0x26c>)
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	f003 030c 	and.w	r3, r3, #12
 8000eae:	2b08      	cmp	r3, #8
 8000eb0:	d11c      	bne.n	8000eec <HAL_RCC_OscConfig+0x18c>
 8000eb2:	4b46      	ldr	r3, [pc, #280]	; (8000fcc <HAL_RCC_OscConfig+0x26c>)
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d116      	bne.n	8000eec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ebe:	4b43      	ldr	r3, [pc, #268]	; (8000fcc <HAL_RCC_OscConfig+0x26c>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f003 0302 	and.w	r3, r3, #2
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d005      	beq.n	8000ed6 <HAL_RCC_OscConfig+0x176>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	691b      	ldr	r3, [r3, #16]
 8000ece:	2b01      	cmp	r3, #1
 8000ed0:	d001      	beq.n	8000ed6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	e1ba      	b.n	800124c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ed6:	4b3d      	ldr	r3, [pc, #244]	; (8000fcc <HAL_RCC_OscConfig+0x26c>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	695b      	ldr	r3, [r3, #20]
 8000ee2:	00db      	lsls	r3, r3, #3
 8000ee4:	4939      	ldr	r1, [pc, #228]	; (8000fcc <HAL_RCC_OscConfig+0x26c>)
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000eea:	e03a      	b.n	8000f62 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	691b      	ldr	r3, [r3, #16]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d020      	beq.n	8000f36 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ef4:	4b36      	ldr	r3, [pc, #216]	; (8000fd0 <HAL_RCC_OscConfig+0x270>)
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000efa:	f7ff fc75 	bl	80007e8 <HAL_GetTick>
 8000efe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f00:	e008      	b.n	8000f14 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f02:	f7ff fc71 	bl	80007e8 <HAL_GetTick>
 8000f06:	4602      	mov	r2, r0
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	1ad3      	subs	r3, r2, r3
 8000f0c:	2b02      	cmp	r3, #2
 8000f0e:	d901      	bls.n	8000f14 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000f10:	2303      	movs	r3, #3
 8000f12:	e19b      	b.n	800124c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f14:	4b2d      	ldr	r3, [pc, #180]	; (8000fcc <HAL_RCC_OscConfig+0x26c>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f003 0302 	and.w	r3, r3, #2
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d0f0      	beq.n	8000f02 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f20:	4b2a      	ldr	r3, [pc, #168]	; (8000fcc <HAL_RCC_OscConfig+0x26c>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	695b      	ldr	r3, [r3, #20]
 8000f2c:	00db      	lsls	r3, r3, #3
 8000f2e:	4927      	ldr	r1, [pc, #156]	; (8000fcc <HAL_RCC_OscConfig+0x26c>)
 8000f30:	4313      	orrs	r3, r2
 8000f32:	600b      	str	r3, [r1, #0]
 8000f34:	e015      	b.n	8000f62 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f36:	4b26      	ldr	r3, [pc, #152]	; (8000fd0 <HAL_RCC_OscConfig+0x270>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f3c:	f7ff fc54 	bl	80007e8 <HAL_GetTick>
 8000f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f42:	e008      	b.n	8000f56 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f44:	f7ff fc50 	bl	80007e8 <HAL_GetTick>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	693b      	ldr	r3, [r7, #16]
 8000f4c:	1ad3      	subs	r3, r2, r3
 8000f4e:	2b02      	cmp	r3, #2
 8000f50:	d901      	bls.n	8000f56 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000f52:	2303      	movs	r3, #3
 8000f54:	e17a      	b.n	800124c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f56:	4b1d      	ldr	r3, [pc, #116]	; (8000fcc <HAL_RCC_OscConfig+0x26c>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f003 0302 	and.w	r3, r3, #2
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d1f0      	bne.n	8000f44 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f003 0308 	and.w	r3, r3, #8
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d03a      	beq.n	8000fe4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	699b      	ldr	r3, [r3, #24]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d019      	beq.n	8000faa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f76:	4b17      	ldr	r3, [pc, #92]	; (8000fd4 <HAL_RCC_OscConfig+0x274>)
 8000f78:	2201      	movs	r2, #1
 8000f7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f7c:	f7ff fc34 	bl	80007e8 <HAL_GetTick>
 8000f80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f82:	e008      	b.n	8000f96 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f84:	f7ff fc30 	bl	80007e8 <HAL_GetTick>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	1ad3      	subs	r3, r2, r3
 8000f8e:	2b02      	cmp	r3, #2
 8000f90:	d901      	bls.n	8000f96 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000f92:	2303      	movs	r3, #3
 8000f94:	e15a      	b.n	800124c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f96:	4b0d      	ldr	r3, [pc, #52]	; (8000fcc <HAL_RCC_OscConfig+0x26c>)
 8000f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f9a:	f003 0302 	and.w	r3, r3, #2
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d0f0      	beq.n	8000f84 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000fa2:	2001      	movs	r0, #1
 8000fa4:	f000 fada 	bl	800155c <RCC_Delay>
 8000fa8:	e01c      	b.n	8000fe4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000faa:	4b0a      	ldr	r3, [pc, #40]	; (8000fd4 <HAL_RCC_OscConfig+0x274>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fb0:	f7ff fc1a 	bl	80007e8 <HAL_GetTick>
 8000fb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fb6:	e00f      	b.n	8000fd8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fb8:	f7ff fc16 	bl	80007e8 <HAL_GetTick>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	1ad3      	subs	r3, r2, r3
 8000fc2:	2b02      	cmp	r3, #2
 8000fc4:	d908      	bls.n	8000fd8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000fc6:	2303      	movs	r3, #3
 8000fc8:	e140      	b.n	800124c <HAL_RCC_OscConfig+0x4ec>
 8000fca:	bf00      	nop
 8000fcc:	40021000 	.word	0x40021000
 8000fd0:	42420000 	.word	0x42420000
 8000fd4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fd8:	4b9e      	ldr	r3, [pc, #632]	; (8001254 <HAL_RCC_OscConfig+0x4f4>)
 8000fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fdc:	f003 0302 	and.w	r3, r3, #2
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d1e9      	bne.n	8000fb8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f003 0304 	and.w	r3, r3, #4
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	f000 80a6 	beq.w	800113e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ff6:	4b97      	ldr	r3, [pc, #604]	; (8001254 <HAL_RCC_OscConfig+0x4f4>)
 8000ff8:	69db      	ldr	r3, [r3, #28]
 8000ffa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d10d      	bne.n	800101e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001002:	4b94      	ldr	r3, [pc, #592]	; (8001254 <HAL_RCC_OscConfig+0x4f4>)
 8001004:	69db      	ldr	r3, [r3, #28]
 8001006:	4a93      	ldr	r2, [pc, #588]	; (8001254 <HAL_RCC_OscConfig+0x4f4>)
 8001008:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800100c:	61d3      	str	r3, [r2, #28]
 800100e:	4b91      	ldr	r3, [pc, #580]	; (8001254 <HAL_RCC_OscConfig+0x4f4>)
 8001010:	69db      	ldr	r3, [r3, #28]
 8001012:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001016:	60bb      	str	r3, [r7, #8]
 8001018:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800101a:	2301      	movs	r3, #1
 800101c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800101e:	4b8e      	ldr	r3, [pc, #568]	; (8001258 <HAL_RCC_OscConfig+0x4f8>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001026:	2b00      	cmp	r3, #0
 8001028:	d118      	bne.n	800105c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800102a:	4b8b      	ldr	r3, [pc, #556]	; (8001258 <HAL_RCC_OscConfig+0x4f8>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a8a      	ldr	r2, [pc, #552]	; (8001258 <HAL_RCC_OscConfig+0x4f8>)
 8001030:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001034:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001036:	f7ff fbd7 	bl	80007e8 <HAL_GetTick>
 800103a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800103c:	e008      	b.n	8001050 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800103e:	f7ff fbd3 	bl	80007e8 <HAL_GetTick>
 8001042:	4602      	mov	r2, r0
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	1ad3      	subs	r3, r2, r3
 8001048:	2b64      	cmp	r3, #100	; 0x64
 800104a:	d901      	bls.n	8001050 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800104c:	2303      	movs	r3, #3
 800104e:	e0fd      	b.n	800124c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001050:	4b81      	ldr	r3, [pc, #516]	; (8001258 <HAL_RCC_OscConfig+0x4f8>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001058:	2b00      	cmp	r3, #0
 800105a:	d0f0      	beq.n	800103e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	2b01      	cmp	r3, #1
 8001062:	d106      	bne.n	8001072 <HAL_RCC_OscConfig+0x312>
 8001064:	4b7b      	ldr	r3, [pc, #492]	; (8001254 <HAL_RCC_OscConfig+0x4f4>)
 8001066:	6a1b      	ldr	r3, [r3, #32]
 8001068:	4a7a      	ldr	r2, [pc, #488]	; (8001254 <HAL_RCC_OscConfig+0x4f4>)
 800106a:	f043 0301 	orr.w	r3, r3, #1
 800106e:	6213      	str	r3, [r2, #32]
 8001070:	e02d      	b.n	80010ce <HAL_RCC_OscConfig+0x36e>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	68db      	ldr	r3, [r3, #12]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d10c      	bne.n	8001094 <HAL_RCC_OscConfig+0x334>
 800107a:	4b76      	ldr	r3, [pc, #472]	; (8001254 <HAL_RCC_OscConfig+0x4f4>)
 800107c:	6a1b      	ldr	r3, [r3, #32]
 800107e:	4a75      	ldr	r2, [pc, #468]	; (8001254 <HAL_RCC_OscConfig+0x4f4>)
 8001080:	f023 0301 	bic.w	r3, r3, #1
 8001084:	6213      	str	r3, [r2, #32]
 8001086:	4b73      	ldr	r3, [pc, #460]	; (8001254 <HAL_RCC_OscConfig+0x4f4>)
 8001088:	6a1b      	ldr	r3, [r3, #32]
 800108a:	4a72      	ldr	r2, [pc, #456]	; (8001254 <HAL_RCC_OscConfig+0x4f4>)
 800108c:	f023 0304 	bic.w	r3, r3, #4
 8001090:	6213      	str	r3, [r2, #32]
 8001092:	e01c      	b.n	80010ce <HAL_RCC_OscConfig+0x36e>
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	2b05      	cmp	r3, #5
 800109a:	d10c      	bne.n	80010b6 <HAL_RCC_OscConfig+0x356>
 800109c:	4b6d      	ldr	r3, [pc, #436]	; (8001254 <HAL_RCC_OscConfig+0x4f4>)
 800109e:	6a1b      	ldr	r3, [r3, #32]
 80010a0:	4a6c      	ldr	r2, [pc, #432]	; (8001254 <HAL_RCC_OscConfig+0x4f4>)
 80010a2:	f043 0304 	orr.w	r3, r3, #4
 80010a6:	6213      	str	r3, [r2, #32]
 80010a8:	4b6a      	ldr	r3, [pc, #424]	; (8001254 <HAL_RCC_OscConfig+0x4f4>)
 80010aa:	6a1b      	ldr	r3, [r3, #32]
 80010ac:	4a69      	ldr	r2, [pc, #420]	; (8001254 <HAL_RCC_OscConfig+0x4f4>)
 80010ae:	f043 0301 	orr.w	r3, r3, #1
 80010b2:	6213      	str	r3, [r2, #32]
 80010b4:	e00b      	b.n	80010ce <HAL_RCC_OscConfig+0x36e>
 80010b6:	4b67      	ldr	r3, [pc, #412]	; (8001254 <HAL_RCC_OscConfig+0x4f4>)
 80010b8:	6a1b      	ldr	r3, [r3, #32]
 80010ba:	4a66      	ldr	r2, [pc, #408]	; (8001254 <HAL_RCC_OscConfig+0x4f4>)
 80010bc:	f023 0301 	bic.w	r3, r3, #1
 80010c0:	6213      	str	r3, [r2, #32]
 80010c2:	4b64      	ldr	r3, [pc, #400]	; (8001254 <HAL_RCC_OscConfig+0x4f4>)
 80010c4:	6a1b      	ldr	r3, [r3, #32]
 80010c6:	4a63      	ldr	r2, [pc, #396]	; (8001254 <HAL_RCC_OscConfig+0x4f4>)
 80010c8:	f023 0304 	bic.w	r3, r3, #4
 80010cc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	68db      	ldr	r3, [r3, #12]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d015      	beq.n	8001102 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010d6:	f7ff fb87 	bl	80007e8 <HAL_GetTick>
 80010da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010dc:	e00a      	b.n	80010f4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010de:	f7ff fb83 	bl	80007e8 <HAL_GetTick>
 80010e2:	4602      	mov	r2, r0
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	1ad3      	subs	r3, r2, r3
 80010e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d901      	bls.n	80010f4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80010f0:	2303      	movs	r3, #3
 80010f2:	e0ab      	b.n	800124c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010f4:	4b57      	ldr	r3, [pc, #348]	; (8001254 <HAL_RCC_OscConfig+0x4f4>)
 80010f6:	6a1b      	ldr	r3, [r3, #32]
 80010f8:	f003 0302 	and.w	r3, r3, #2
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d0ee      	beq.n	80010de <HAL_RCC_OscConfig+0x37e>
 8001100:	e014      	b.n	800112c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001102:	f7ff fb71 	bl	80007e8 <HAL_GetTick>
 8001106:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001108:	e00a      	b.n	8001120 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800110a:	f7ff fb6d 	bl	80007e8 <HAL_GetTick>
 800110e:	4602      	mov	r2, r0
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	1ad3      	subs	r3, r2, r3
 8001114:	f241 3288 	movw	r2, #5000	; 0x1388
 8001118:	4293      	cmp	r3, r2
 800111a:	d901      	bls.n	8001120 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800111c:	2303      	movs	r3, #3
 800111e:	e095      	b.n	800124c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001120:	4b4c      	ldr	r3, [pc, #304]	; (8001254 <HAL_RCC_OscConfig+0x4f4>)
 8001122:	6a1b      	ldr	r3, [r3, #32]
 8001124:	f003 0302 	and.w	r3, r3, #2
 8001128:	2b00      	cmp	r3, #0
 800112a:	d1ee      	bne.n	800110a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800112c:	7dfb      	ldrb	r3, [r7, #23]
 800112e:	2b01      	cmp	r3, #1
 8001130:	d105      	bne.n	800113e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001132:	4b48      	ldr	r3, [pc, #288]	; (8001254 <HAL_RCC_OscConfig+0x4f4>)
 8001134:	69db      	ldr	r3, [r3, #28]
 8001136:	4a47      	ldr	r2, [pc, #284]	; (8001254 <HAL_RCC_OscConfig+0x4f4>)
 8001138:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800113c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	69db      	ldr	r3, [r3, #28]
 8001142:	2b00      	cmp	r3, #0
 8001144:	f000 8081 	beq.w	800124a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001148:	4b42      	ldr	r3, [pc, #264]	; (8001254 <HAL_RCC_OscConfig+0x4f4>)
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f003 030c 	and.w	r3, r3, #12
 8001150:	2b08      	cmp	r3, #8
 8001152:	d061      	beq.n	8001218 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	69db      	ldr	r3, [r3, #28]
 8001158:	2b02      	cmp	r3, #2
 800115a:	d146      	bne.n	80011ea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800115c:	4b3f      	ldr	r3, [pc, #252]	; (800125c <HAL_RCC_OscConfig+0x4fc>)
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001162:	f7ff fb41 	bl	80007e8 <HAL_GetTick>
 8001166:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001168:	e008      	b.n	800117c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800116a:	f7ff fb3d 	bl	80007e8 <HAL_GetTick>
 800116e:	4602      	mov	r2, r0
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	1ad3      	subs	r3, r2, r3
 8001174:	2b02      	cmp	r3, #2
 8001176:	d901      	bls.n	800117c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001178:	2303      	movs	r3, #3
 800117a:	e067      	b.n	800124c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800117c:	4b35      	ldr	r3, [pc, #212]	; (8001254 <HAL_RCC_OscConfig+0x4f4>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001184:	2b00      	cmp	r3, #0
 8001186:	d1f0      	bne.n	800116a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6a1b      	ldr	r3, [r3, #32]
 800118c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001190:	d108      	bne.n	80011a4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001192:	4b30      	ldr	r3, [pc, #192]	; (8001254 <HAL_RCC_OscConfig+0x4f4>)
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	689b      	ldr	r3, [r3, #8]
 800119e:	492d      	ldr	r1, [pc, #180]	; (8001254 <HAL_RCC_OscConfig+0x4f4>)
 80011a0:	4313      	orrs	r3, r2
 80011a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011a4:	4b2b      	ldr	r3, [pc, #172]	; (8001254 <HAL_RCC_OscConfig+0x4f4>)
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6a19      	ldr	r1, [r3, #32]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b4:	430b      	orrs	r3, r1
 80011b6:	4927      	ldr	r1, [pc, #156]	; (8001254 <HAL_RCC_OscConfig+0x4f4>)
 80011b8:	4313      	orrs	r3, r2
 80011ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80011bc:	4b27      	ldr	r3, [pc, #156]	; (800125c <HAL_RCC_OscConfig+0x4fc>)
 80011be:	2201      	movs	r2, #1
 80011c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011c2:	f7ff fb11 	bl	80007e8 <HAL_GetTick>
 80011c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011c8:	e008      	b.n	80011dc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011ca:	f7ff fb0d 	bl	80007e8 <HAL_GetTick>
 80011ce:	4602      	mov	r2, r0
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	1ad3      	subs	r3, r2, r3
 80011d4:	2b02      	cmp	r3, #2
 80011d6:	d901      	bls.n	80011dc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80011d8:	2303      	movs	r3, #3
 80011da:	e037      	b.n	800124c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011dc:	4b1d      	ldr	r3, [pc, #116]	; (8001254 <HAL_RCC_OscConfig+0x4f4>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d0f0      	beq.n	80011ca <HAL_RCC_OscConfig+0x46a>
 80011e8:	e02f      	b.n	800124a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011ea:	4b1c      	ldr	r3, [pc, #112]	; (800125c <HAL_RCC_OscConfig+0x4fc>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011f0:	f7ff fafa 	bl	80007e8 <HAL_GetTick>
 80011f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011f6:	e008      	b.n	800120a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011f8:	f7ff faf6 	bl	80007e8 <HAL_GetTick>
 80011fc:	4602      	mov	r2, r0
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	2b02      	cmp	r3, #2
 8001204:	d901      	bls.n	800120a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001206:	2303      	movs	r3, #3
 8001208:	e020      	b.n	800124c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800120a:	4b12      	ldr	r3, [pc, #72]	; (8001254 <HAL_RCC_OscConfig+0x4f4>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001212:	2b00      	cmp	r3, #0
 8001214:	d1f0      	bne.n	80011f8 <HAL_RCC_OscConfig+0x498>
 8001216:	e018      	b.n	800124a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	69db      	ldr	r3, [r3, #28]
 800121c:	2b01      	cmp	r3, #1
 800121e:	d101      	bne.n	8001224 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001220:	2301      	movs	r3, #1
 8001222:	e013      	b.n	800124c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001224:	4b0b      	ldr	r3, [pc, #44]	; (8001254 <HAL_RCC_OscConfig+0x4f4>)
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6a1b      	ldr	r3, [r3, #32]
 8001234:	429a      	cmp	r2, r3
 8001236:	d106      	bne.n	8001246 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001242:	429a      	cmp	r2, r3
 8001244:	d001      	beq.n	800124a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
 8001248:	e000      	b.n	800124c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800124a:	2300      	movs	r3, #0
}
 800124c:	4618      	mov	r0, r3
 800124e:	3718      	adds	r7, #24
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	40021000 	.word	0x40021000
 8001258:	40007000 	.word	0x40007000
 800125c:	42420060 	.word	0x42420060

08001260 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d101      	bne.n	8001274 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001270:	2301      	movs	r3, #1
 8001272:	e0d0      	b.n	8001416 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001274:	4b6a      	ldr	r3, [pc, #424]	; (8001420 <HAL_RCC_ClockConfig+0x1c0>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f003 0307 	and.w	r3, r3, #7
 800127c:	683a      	ldr	r2, [r7, #0]
 800127e:	429a      	cmp	r2, r3
 8001280:	d910      	bls.n	80012a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001282:	4b67      	ldr	r3, [pc, #412]	; (8001420 <HAL_RCC_ClockConfig+0x1c0>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f023 0207 	bic.w	r2, r3, #7
 800128a:	4965      	ldr	r1, [pc, #404]	; (8001420 <HAL_RCC_ClockConfig+0x1c0>)
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	4313      	orrs	r3, r2
 8001290:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001292:	4b63      	ldr	r3, [pc, #396]	; (8001420 <HAL_RCC_ClockConfig+0x1c0>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f003 0307 	and.w	r3, r3, #7
 800129a:	683a      	ldr	r2, [r7, #0]
 800129c:	429a      	cmp	r2, r3
 800129e:	d001      	beq.n	80012a4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80012a0:	2301      	movs	r3, #1
 80012a2:	e0b8      	b.n	8001416 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f003 0302 	and.w	r3, r3, #2
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d020      	beq.n	80012f2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f003 0304 	and.w	r3, r3, #4
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d005      	beq.n	80012c8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012bc:	4b59      	ldr	r3, [pc, #356]	; (8001424 <HAL_RCC_ClockConfig+0x1c4>)
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	4a58      	ldr	r2, [pc, #352]	; (8001424 <HAL_RCC_ClockConfig+0x1c4>)
 80012c2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80012c6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f003 0308 	and.w	r3, r3, #8
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d005      	beq.n	80012e0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012d4:	4b53      	ldr	r3, [pc, #332]	; (8001424 <HAL_RCC_ClockConfig+0x1c4>)
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	4a52      	ldr	r2, [pc, #328]	; (8001424 <HAL_RCC_ClockConfig+0x1c4>)
 80012da:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80012de:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012e0:	4b50      	ldr	r3, [pc, #320]	; (8001424 <HAL_RCC_ClockConfig+0x1c4>)
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	494d      	ldr	r1, [pc, #308]	; (8001424 <HAL_RCC_ClockConfig+0x1c4>)
 80012ee:	4313      	orrs	r3, r2
 80012f0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f003 0301 	and.w	r3, r3, #1
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d040      	beq.n	8001380 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	2b01      	cmp	r3, #1
 8001304:	d107      	bne.n	8001316 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001306:	4b47      	ldr	r3, [pc, #284]	; (8001424 <HAL_RCC_ClockConfig+0x1c4>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800130e:	2b00      	cmp	r3, #0
 8001310:	d115      	bne.n	800133e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	e07f      	b.n	8001416 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	2b02      	cmp	r3, #2
 800131c:	d107      	bne.n	800132e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800131e:	4b41      	ldr	r3, [pc, #260]	; (8001424 <HAL_RCC_ClockConfig+0x1c4>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001326:	2b00      	cmp	r3, #0
 8001328:	d109      	bne.n	800133e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	e073      	b.n	8001416 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800132e:	4b3d      	ldr	r3, [pc, #244]	; (8001424 <HAL_RCC_ClockConfig+0x1c4>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f003 0302 	and.w	r3, r3, #2
 8001336:	2b00      	cmp	r3, #0
 8001338:	d101      	bne.n	800133e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e06b      	b.n	8001416 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800133e:	4b39      	ldr	r3, [pc, #228]	; (8001424 <HAL_RCC_ClockConfig+0x1c4>)
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	f023 0203 	bic.w	r2, r3, #3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	4936      	ldr	r1, [pc, #216]	; (8001424 <HAL_RCC_ClockConfig+0x1c4>)
 800134c:	4313      	orrs	r3, r2
 800134e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001350:	f7ff fa4a 	bl	80007e8 <HAL_GetTick>
 8001354:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001356:	e00a      	b.n	800136e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001358:	f7ff fa46 	bl	80007e8 <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	f241 3288 	movw	r2, #5000	; 0x1388
 8001366:	4293      	cmp	r3, r2
 8001368:	d901      	bls.n	800136e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800136a:	2303      	movs	r3, #3
 800136c:	e053      	b.n	8001416 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800136e:	4b2d      	ldr	r3, [pc, #180]	; (8001424 <HAL_RCC_ClockConfig+0x1c4>)
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f003 020c 	and.w	r2, r3, #12
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	429a      	cmp	r2, r3
 800137e:	d1eb      	bne.n	8001358 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001380:	4b27      	ldr	r3, [pc, #156]	; (8001420 <HAL_RCC_ClockConfig+0x1c0>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f003 0307 	and.w	r3, r3, #7
 8001388:	683a      	ldr	r2, [r7, #0]
 800138a:	429a      	cmp	r2, r3
 800138c:	d210      	bcs.n	80013b0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800138e:	4b24      	ldr	r3, [pc, #144]	; (8001420 <HAL_RCC_ClockConfig+0x1c0>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f023 0207 	bic.w	r2, r3, #7
 8001396:	4922      	ldr	r1, [pc, #136]	; (8001420 <HAL_RCC_ClockConfig+0x1c0>)
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	4313      	orrs	r3, r2
 800139c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800139e:	4b20      	ldr	r3, [pc, #128]	; (8001420 <HAL_RCC_ClockConfig+0x1c0>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f003 0307 	and.w	r3, r3, #7
 80013a6:	683a      	ldr	r2, [r7, #0]
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d001      	beq.n	80013b0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80013ac:	2301      	movs	r3, #1
 80013ae:	e032      	b.n	8001416 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f003 0304 	and.w	r3, r3, #4
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d008      	beq.n	80013ce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013bc:	4b19      	ldr	r3, [pc, #100]	; (8001424 <HAL_RCC_ClockConfig+0x1c4>)
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	4916      	ldr	r1, [pc, #88]	; (8001424 <HAL_RCC_ClockConfig+0x1c4>)
 80013ca:	4313      	orrs	r3, r2
 80013cc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f003 0308 	and.w	r3, r3, #8
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d009      	beq.n	80013ee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80013da:	4b12      	ldr	r3, [pc, #72]	; (8001424 <HAL_RCC_ClockConfig+0x1c4>)
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	691b      	ldr	r3, [r3, #16]
 80013e6:	00db      	lsls	r3, r3, #3
 80013e8:	490e      	ldr	r1, [pc, #56]	; (8001424 <HAL_RCC_ClockConfig+0x1c4>)
 80013ea:	4313      	orrs	r3, r2
 80013ec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80013ee:	f000 f821 	bl	8001434 <HAL_RCC_GetSysClockFreq>
 80013f2:	4601      	mov	r1, r0
 80013f4:	4b0b      	ldr	r3, [pc, #44]	; (8001424 <HAL_RCC_ClockConfig+0x1c4>)
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	091b      	lsrs	r3, r3, #4
 80013fa:	f003 030f 	and.w	r3, r3, #15
 80013fe:	4a0a      	ldr	r2, [pc, #40]	; (8001428 <HAL_RCC_ClockConfig+0x1c8>)
 8001400:	5cd3      	ldrb	r3, [r2, r3]
 8001402:	fa21 f303 	lsr.w	r3, r1, r3
 8001406:	4a09      	ldr	r2, [pc, #36]	; (800142c <HAL_RCC_ClockConfig+0x1cc>)
 8001408:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800140a:	4b09      	ldr	r3, [pc, #36]	; (8001430 <HAL_RCC_ClockConfig+0x1d0>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff f9a8 	bl	8000764 <HAL_InitTick>

  return HAL_OK;
 8001414:	2300      	movs	r3, #0
}
 8001416:	4618      	mov	r0, r3
 8001418:	3710      	adds	r7, #16
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	40022000 	.word	0x40022000
 8001424:	40021000 	.word	0x40021000
 8001428:	080029a0 	.word	0x080029a0
 800142c:	20000000 	.word	0x20000000
 8001430:	20000004 	.word	0x20000004

08001434 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001434:	b490      	push	{r4, r7}
 8001436:	b08a      	sub	sp, #40	; 0x28
 8001438:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800143a:	4b2a      	ldr	r3, [pc, #168]	; (80014e4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800143c:	1d3c      	adds	r4, r7, #4
 800143e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001440:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001444:	4b28      	ldr	r3, [pc, #160]	; (80014e8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001446:	881b      	ldrh	r3, [r3, #0]
 8001448:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800144a:	2300      	movs	r3, #0
 800144c:	61fb      	str	r3, [r7, #28]
 800144e:	2300      	movs	r3, #0
 8001450:	61bb      	str	r3, [r7, #24]
 8001452:	2300      	movs	r3, #0
 8001454:	627b      	str	r3, [r7, #36]	; 0x24
 8001456:	2300      	movs	r3, #0
 8001458:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800145a:	2300      	movs	r3, #0
 800145c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800145e:	4b23      	ldr	r3, [pc, #140]	; (80014ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	f003 030c 	and.w	r3, r3, #12
 800146a:	2b04      	cmp	r3, #4
 800146c:	d002      	beq.n	8001474 <HAL_RCC_GetSysClockFreq+0x40>
 800146e:	2b08      	cmp	r3, #8
 8001470:	d003      	beq.n	800147a <HAL_RCC_GetSysClockFreq+0x46>
 8001472:	e02d      	b.n	80014d0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001474:	4b1e      	ldr	r3, [pc, #120]	; (80014f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001476:	623b      	str	r3, [r7, #32]
      break;
 8001478:	e02d      	b.n	80014d6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	0c9b      	lsrs	r3, r3, #18
 800147e:	f003 030f 	and.w	r3, r3, #15
 8001482:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001486:	4413      	add	r3, r2
 8001488:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800148c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001494:	2b00      	cmp	r3, #0
 8001496:	d013      	beq.n	80014c0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001498:	4b14      	ldr	r3, [pc, #80]	; (80014ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	0c5b      	lsrs	r3, r3, #17
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80014a6:	4413      	add	r3, r2
 80014a8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80014ac:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	4a0f      	ldr	r2, [pc, #60]	; (80014f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80014b2:	fb02 f203 	mul.w	r2, r2, r3
 80014b6:	69bb      	ldr	r3, [r7, #24]
 80014b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80014bc:	627b      	str	r3, [r7, #36]	; 0x24
 80014be:	e004      	b.n	80014ca <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	4a0c      	ldr	r2, [pc, #48]	; (80014f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 80014c4:	fb02 f303 	mul.w	r3, r2, r3
 80014c8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80014ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014cc:	623b      	str	r3, [r7, #32]
      break;
 80014ce:	e002      	b.n	80014d6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80014d0:	4b07      	ldr	r3, [pc, #28]	; (80014f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80014d2:	623b      	str	r3, [r7, #32]
      break;
 80014d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80014d6:	6a3b      	ldr	r3, [r7, #32]
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3728      	adds	r7, #40	; 0x28
 80014dc:	46bd      	mov	sp, r7
 80014de:	bc90      	pop	{r4, r7}
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	0800298c 	.word	0x0800298c
 80014e8:	0800299c 	.word	0x0800299c
 80014ec:	40021000 	.word	0x40021000
 80014f0:	007a1200 	.word	0x007a1200
 80014f4:	003d0900 	.word	0x003d0900

080014f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80014fc:	4b02      	ldr	r3, [pc, #8]	; (8001508 <HAL_RCC_GetHCLKFreq+0x10>)
 80014fe:	681b      	ldr	r3, [r3, #0]
}
 8001500:	4618      	mov	r0, r3
 8001502:	46bd      	mov	sp, r7
 8001504:	bc80      	pop	{r7}
 8001506:	4770      	bx	lr
 8001508:	20000000 	.word	0x20000000

0800150c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001510:	f7ff fff2 	bl	80014f8 <HAL_RCC_GetHCLKFreq>
 8001514:	4601      	mov	r1, r0
 8001516:	4b05      	ldr	r3, [pc, #20]	; (800152c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	0a1b      	lsrs	r3, r3, #8
 800151c:	f003 0307 	and.w	r3, r3, #7
 8001520:	4a03      	ldr	r2, [pc, #12]	; (8001530 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001522:	5cd3      	ldrb	r3, [r2, r3]
 8001524:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001528:	4618      	mov	r0, r3
 800152a:	bd80      	pop	{r7, pc}
 800152c:	40021000 	.word	0x40021000
 8001530:	080029b0 	.word	0x080029b0

08001534 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001538:	f7ff ffde 	bl	80014f8 <HAL_RCC_GetHCLKFreq>
 800153c:	4601      	mov	r1, r0
 800153e:	4b05      	ldr	r3, [pc, #20]	; (8001554 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	0adb      	lsrs	r3, r3, #11
 8001544:	f003 0307 	and.w	r3, r3, #7
 8001548:	4a03      	ldr	r2, [pc, #12]	; (8001558 <HAL_RCC_GetPCLK2Freq+0x24>)
 800154a:	5cd3      	ldrb	r3, [r2, r3]
 800154c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001550:	4618      	mov	r0, r3
 8001552:	bd80      	pop	{r7, pc}
 8001554:	40021000 	.word	0x40021000
 8001558:	080029b0 	.word	0x080029b0

0800155c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800155c:	b480      	push	{r7}
 800155e:	b085      	sub	sp, #20
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001564:	4b0a      	ldr	r3, [pc, #40]	; (8001590 <RCC_Delay+0x34>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a0a      	ldr	r2, [pc, #40]	; (8001594 <RCC_Delay+0x38>)
 800156a:	fba2 2303 	umull	r2, r3, r2, r3
 800156e:	0a5b      	lsrs	r3, r3, #9
 8001570:	687a      	ldr	r2, [r7, #4]
 8001572:	fb02 f303 	mul.w	r3, r2, r3
 8001576:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001578:	bf00      	nop
  }
  while (Delay --);
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	1e5a      	subs	r2, r3, #1
 800157e:	60fa      	str	r2, [r7, #12]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d1f9      	bne.n	8001578 <RCC_Delay+0x1c>
}
 8001584:	bf00      	nop
 8001586:	3714      	adds	r7, #20
 8001588:	46bd      	mov	sp, r7
 800158a:	bc80      	pop	{r7}
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	20000000 	.word	0x20000000
 8001594:	10624dd3 	.word	0x10624dd3

08001598 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d101      	bne.n	80015aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e041      	b.n	800162e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d106      	bne.n	80015c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2200      	movs	r2, #0
 80015ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f7fe ffa0 	bl	8000504 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2202      	movs	r2, #2
 80015c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	3304      	adds	r3, #4
 80015d4:	4619      	mov	r1, r3
 80015d6:	4610      	mov	r0, r2
 80015d8:	f000 fa64 	bl	8001aa4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2201      	movs	r2, #1
 80015e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2201      	movs	r2, #1
 80015e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2201      	movs	r2, #1
 80015f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2201      	movs	r2, #1
 80015f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2201      	movs	r2, #1
 8001600:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2201      	movs	r2, #1
 8001608:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2201      	movs	r2, #1
 8001610:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2201      	movs	r2, #1
 8001618:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2201      	movs	r2, #1
 8001620:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2201      	movs	r2, #1
 8001628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800162c:	2300      	movs	r3, #0
}
 800162e:	4618      	mov	r0, r3
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
	...

08001638 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001638:	b480      	push	{r7}
 800163a:	b085      	sub	sp, #20
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001646:	b2db      	uxtb	r3, r3
 8001648:	2b01      	cmp	r3, #1
 800164a:	d001      	beq.n	8001650 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	e03a      	b.n	80016c6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2202      	movs	r2, #2
 8001654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	68da      	ldr	r2, [r3, #12]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f042 0201 	orr.w	r2, r2, #1
 8001666:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a18      	ldr	r2, [pc, #96]	; (80016d0 <HAL_TIM_Base_Start_IT+0x98>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d00e      	beq.n	8001690 <HAL_TIM_Base_Start_IT+0x58>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800167a:	d009      	beq.n	8001690 <HAL_TIM_Base_Start_IT+0x58>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a14      	ldr	r2, [pc, #80]	; (80016d4 <HAL_TIM_Base_Start_IT+0x9c>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d004      	beq.n	8001690 <HAL_TIM_Base_Start_IT+0x58>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a13      	ldr	r2, [pc, #76]	; (80016d8 <HAL_TIM_Base_Start_IT+0xa0>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d111      	bne.n	80016b4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	f003 0307 	and.w	r3, r3, #7
 800169a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	2b06      	cmp	r3, #6
 80016a0:	d010      	beq.n	80016c4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f042 0201 	orr.w	r2, r2, #1
 80016b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80016b2:	e007      	b.n	80016c4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f042 0201 	orr.w	r2, r2, #1
 80016c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80016c4:	2300      	movs	r3, #0
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3714      	adds	r7, #20
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bc80      	pop	{r7}
 80016ce:	4770      	bx	lr
 80016d0:	40012c00 	.word	0x40012c00
 80016d4:	40000400 	.word	0x40000400
 80016d8:	40000800 	.word	0x40000800

080016dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	691b      	ldr	r3, [r3, #16]
 80016ea:	f003 0302 	and.w	r3, r3, #2
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	d122      	bne.n	8001738 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	f003 0302 	and.w	r3, r3, #2
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	d11b      	bne.n	8001738 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f06f 0202 	mvn.w	r2, #2
 8001708:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2201      	movs	r2, #1
 800170e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	699b      	ldr	r3, [r3, #24]
 8001716:	f003 0303 	and.w	r3, r3, #3
 800171a:	2b00      	cmp	r3, #0
 800171c:	d003      	beq.n	8001726 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f000 f9a4 	bl	8001a6c <HAL_TIM_IC_CaptureCallback>
 8001724:	e005      	b.n	8001732 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f000 f997 	bl	8001a5a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	f000 f9a6 	bl	8001a7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2200      	movs	r2, #0
 8001736:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	691b      	ldr	r3, [r3, #16]
 800173e:	f003 0304 	and.w	r3, r3, #4
 8001742:	2b04      	cmp	r3, #4
 8001744:	d122      	bne.n	800178c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	f003 0304 	and.w	r3, r3, #4
 8001750:	2b04      	cmp	r3, #4
 8001752:	d11b      	bne.n	800178c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f06f 0204 	mvn.w	r2, #4
 800175c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2202      	movs	r2, #2
 8001762:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	699b      	ldr	r3, [r3, #24]
 800176a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800176e:	2b00      	cmp	r3, #0
 8001770:	d003      	beq.n	800177a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f000 f97a 	bl	8001a6c <HAL_TIM_IC_CaptureCallback>
 8001778:	e005      	b.n	8001786 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f000 f96d 	bl	8001a5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	f000 f97c 	bl	8001a7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2200      	movs	r2, #0
 800178a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	691b      	ldr	r3, [r3, #16]
 8001792:	f003 0308 	and.w	r3, r3, #8
 8001796:	2b08      	cmp	r3, #8
 8001798:	d122      	bne.n	80017e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	f003 0308 	and.w	r3, r3, #8
 80017a4:	2b08      	cmp	r3, #8
 80017a6:	d11b      	bne.n	80017e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f06f 0208 	mvn.w	r2, #8
 80017b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2204      	movs	r2, #4
 80017b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	69db      	ldr	r3, [r3, #28]
 80017be:	f003 0303 	and.w	r3, r3, #3
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d003      	beq.n	80017ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f000 f950 	bl	8001a6c <HAL_TIM_IC_CaptureCallback>
 80017cc:	e005      	b.n	80017da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f000 f943 	bl	8001a5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f000 f952 	bl	8001a7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2200      	movs	r2, #0
 80017de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	691b      	ldr	r3, [r3, #16]
 80017e6:	f003 0310 	and.w	r3, r3, #16
 80017ea:	2b10      	cmp	r3, #16
 80017ec:	d122      	bne.n	8001834 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	f003 0310 	and.w	r3, r3, #16
 80017f8:	2b10      	cmp	r3, #16
 80017fa:	d11b      	bne.n	8001834 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f06f 0210 	mvn.w	r2, #16
 8001804:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2208      	movs	r2, #8
 800180a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	69db      	ldr	r3, [r3, #28]
 8001812:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001816:	2b00      	cmp	r3, #0
 8001818:	d003      	beq.n	8001822 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f000 f926 	bl	8001a6c <HAL_TIM_IC_CaptureCallback>
 8001820:	e005      	b.n	800182e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f000 f919 	bl	8001a5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	f000 f928 	bl	8001a7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2200      	movs	r2, #0
 8001832:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	691b      	ldr	r3, [r3, #16]
 800183a:	f003 0301 	and.w	r3, r3, #1
 800183e:	2b01      	cmp	r3, #1
 8001840:	d10e      	bne.n	8001860 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	f003 0301 	and.w	r3, r3, #1
 800184c:	2b01      	cmp	r3, #1
 800184e:	d107      	bne.n	8001860 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f06f 0201 	mvn.w	r2, #1
 8001858:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f7fe fdf6 	bl	800044c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	691b      	ldr	r3, [r3, #16]
 8001866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800186a:	2b80      	cmp	r3, #128	; 0x80
 800186c:	d10e      	bne.n	800188c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001878:	2b80      	cmp	r3, #128	; 0x80
 800187a:	d107      	bne.n	800188c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001884:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f000 fa6b 	bl	8001d62 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	691b      	ldr	r3, [r3, #16]
 8001892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001896:	2b40      	cmp	r3, #64	; 0x40
 8001898:	d10e      	bne.n	80018b8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018a4:	2b40      	cmp	r3, #64	; 0x40
 80018a6:	d107      	bne.n	80018b8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80018b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f000 f8ec 	bl	8001a90 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	691b      	ldr	r3, [r3, #16]
 80018be:	f003 0320 	and.w	r3, r3, #32
 80018c2:	2b20      	cmp	r3, #32
 80018c4:	d10e      	bne.n	80018e4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	f003 0320 	and.w	r3, r3, #32
 80018d0:	2b20      	cmp	r3, #32
 80018d2:	d107      	bne.n	80018e4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f06f 0220 	mvn.w	r2, #32
 80018dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f000 fa36 	bl	8001d50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80018e4:	bf00      	nop
 80018e6:	3708      	adds	r7, #8
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}

080018ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d101      	bne.n	8001904 <HAL_TIM_ConfigClockSource+0x18>
 8001900:	2302      	movs	r3, #2
 8001902:	e0a6      	b.n	8001a52 <HAL_TIM_ConfigClockSource+0x166>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2201      	movs	r2, #1
 8001908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2202      	movs	r2, #2
 8001910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001922:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800192a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	68fa      	ldr	r2, [r7, #12]
 8001932:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2b40      	cmp	r3, #64	; 0x40
 800193a:	d067      	beq.n	8001a0c <HAL_TIM_ConfigClockSource+0x120>
 800193c:	2b40      	cmp	r3, #64	; 0x40
 800193e:	d80b      	bhi.n	8001958 <HAL_TIM_ConfigClockSource+0x6c>
 8001940:	2b10      	cmp	r3, #16
 8001942:	d073      	beq.n	8001a2c <HAL_TIM_ConfigClockSource+0x140>
 8001944:	2b10      	cmp	r3, #16
 8001946:	d802      	bhi.n	800194e <HAL_TIM_ConfigClockSource+0x62>
 8001948:	2b00      	cmp	r3, #0
 800194a:	d06f      	beq.n	8001a2c <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800194c:	e078      	b.n	8001a40 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800194e:	2b20      	cmp	r3, #32
 8001950:	d06c      	beq.n	8001a2c <HAL_TIM_ConfigClockSource+0x140>
 8001952:	2b30      	cmp	r3, #48	; 0x30
 8001954:	d06a      	beq.n	8001a2c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8001956:	e073      	b.n	8001a40 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001958:	2b70      	cmp	r3, #112	; 0x70
 800195a:	d00d      	beq.n	8001978 <HAL_TIM_ConfigClockSource+0x8c>
 800195c:	2b70      	cmp	r3, #112	; 0x70
 800195e:	d804      	bhi.n	800196a <HAL_TIM_ConfigClockSource+0x7e>
 8001960:	2b50      	cmp	r3, #80	; 0x50
 8001962:	d033      	beq.n	80019cc <HAL_TIM_ConfigClockSource+0xe0>
 8001964:	2b60      	cmp	r3, #96	; 0x60
 8001966:	d041      	beq.n	80019ec <HAL_TIM_ConfigClockSource+0x100>
      break;
 8001968:	e06a      	b.n	8001a40 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800196a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800196e:	d066      	beq.n	8001a3e <HAL_TIM_ConfigClockSource+0x152>
 8001970:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001974:	d017      	beq.n	80019a6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8001976:	e063      	b.n	8001a40 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6818      	ldr	r0, [r3, #0]
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	6899      	ldr	r1, [r3, #8]
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685a      	ldr	r2, [r3, #4]
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	f000 f965 	bl	8001c56 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800199a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	68fa      	ldr	r2, [r7, #12]
 80019a2:	609a      	str	r2, [r3, #8]
      break;
 80019a4:	e04c      	b.n	8001a40 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6818      	ldr	r0, [r3, #0]
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	6899      	ldr	r1, [r3, #8]
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	685a      	ldr	r2, [r3, #4]
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	68db      	ldr	r3, [r3, #12]
 80019b6:	f000 f94e 	bl	8001c56 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	689a      	ldr	r2, [r3, #8]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80019c8:	609a      	str	r2, [r3, #8]
      break;
 80019ca:	e039      	b.n	8001a40 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6818      	ldr	r0, [r3, #0]
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	6859      	ldr	r1, [r3, #4]
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	461a      	mov	r2, r3
 80019da:	f000 f8c5 	bl	8001b68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	2150      	movs	r1, #80	; 0x50
 80019e4:	4618      	mov	r0, r3
 80019e6:	f000 f91c 	bl	8001c22 <TIM_ITRx_SetConfig>
      break;
 80019ea:	e029      	b.n	8001a40 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6818      	ldr	r0, [r3, #0]
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	6859      	ldr	r1, [r3, #4]
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	461a      	mov	r2, r3
 80019fa:	f000 f8e3 	bl	8001bc4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2160      	movs	r1, #96	; 0x60
 8001a04:	4618      	mov	r0, r3
 8001a06:	f000 f90c 	bl	8001c22 <TIM_ITRx_SetConfig>
      break;
 8001a0a:	e019      	b.n	8001a40 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6818      	ldr	r0, [r3, #0]
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	6859      	ldr	r1, [r3, #4]
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	461a      	mov	r2, r3
 8001a1a:	f000 f8a5 	bl	8001b68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	2140      	movs	r1, #64	; 0x40
 8001a24:	4618      	mov	r0, r3
 8001a26:	f000 f8fc 	bl	8001c22 <TIM_ITRx_SetConfig>
      break;
 8001a2a:	e009      	b.n	8001a40 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4619      	mov	r1, r3
 8001a36:	4610      	mov	r0, r2
 8001a38:	f000 f8f3 	bl	8001c22 <TIM_ITRx_SetConfig>
        break;
 8001a3c:	e000      	b.n	8001a40 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8001a3e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2201      	movs	r2, #1
 8001a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3710      	adds	r7, #16
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	b083      	sub	sp, #12
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001a62:	bf00      	nop
 8001a64:	370c      	adds	r7, #12
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bc80      	pop	{r7}
 8001a6a:	4770      	bx	lr

08001a6c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001a74:	bf00      	nop
 8001a76:	370c      	adds	r7, #12
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bc80      	pop	{r7}
 8001a7c:	4770      	bx	lr

08001a7e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	b083      	sub	sp, #12
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001a86:	bf00      	nop
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bc80      	pop	{r7}
 8001a8e:	4770      	bx	lr

08001a90 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001a98:	bf00      	nop
 8001a9a:	370c      	adds	r7, #12
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bc80      	pop	{r7}
 8001aa0:	4770      	bx	lr
	...

08001aa4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b085      	sub	sp, #20
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	4a29      	ldr	r2, [pc, #164]	; (8001b5c <TIM_Base_SetConfig+0xb8>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d00b      	beq.n	8001ad4 <TIM_Base_SetConfig+0x30>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ac2:	d007      	beq.n	8001ad4 <TIM_Base_SetConfig+0x30>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	4a26      	ldr	r2, [pc, #152]	; (8001b60 <TIM_Base_SetConfig+0xbc>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d003      	beq.n	8001ad4 <TIM_Base_SetConfig+0x30>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	4a25      	ldr	r2, [pc, #148]	; (8001b64 <TIM_Base_SetConfig+0xc0>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d108      	bne.n	8001ae6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ada:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	68fa      	ldr	r2, [r7, #12]
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4a1c      	ldr	r2, [pc, #112]	; (8001b5c <TIM_Base_SetConfig+0xb8>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d00b      	beq.n	8001b06 <TIM_Base_SetConfig+0x62>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001af4:	d007      	beq.n	8001b06 <TIM_Base_SetConfig+0x62>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4a19      	ldr	r2, [pc, #100]	; (8001b60 <TIM_Base_SetConfig+0xbc>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d003      	beq.n	8001b06 <TIM_Base_SetConfig+0x62>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4a18      	ldr	r2, [pc, #96]	; (8001b64 <TIM_Base_SetConfig+0xc0>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d108      	bne.n	8001b18 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	68db      	ldr	r3, [r3, #12]
 8001b12:	68fa      	ldr	r2, [r7, #12]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	695b      	ldr	r3, [r3, #20]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	68fa      	ldr	r2, [r7, #12]
 8001b2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	689a      	ldr	r2, [r3, #8]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	4a07      	ldr	r2, [pc, #28]	; (8001b5c <TIM_Base_SetConfig+0xb8>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d103      	bne.n	8001b4c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	691a      	ldr	r2, [r3, #16]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	615a      	str	r2, [r3, #20]
}
 8001b52:	bf00      	nop
 8001b54:	3714      	adds	r7, #20
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bc80      	pop	{r7}
 8001b5a:	4770      	bx	lr
 8001b5c:	40012c00 	.word	0x40012c00
 8001b60:	40000400 	.word	0x40000400
 8001b64:	40000800 	.word	0x40000800

08001b68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b087      	sub	sp, #28
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	60f8      	str	r0, [r7, #12]
 8001b70:	60b9      	str	r1, [r7, #8]
 8001b72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	6a1b      	ldr	r3, [r3, #32]
 8001b78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	6a1b      	ldr	r3, [r3, #32]
 8001b7e:	f023 0201 	bic.w	r2, r3, #1
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	699b      	ldr	r3, [r3, #24]
 8001b8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	011b      	lsls	r3, r3, #4
 8001b98:	693a      	ldr	r2, [r7, #16]
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	f023 030a 	bic.w	r3, r3, #10
 8001ba4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001ba6:	697a      	ldr	r2, [r7, #20]
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	693a      	ldr	r2, [r7, #16]
 8001bb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	697a      	ldr	r2, [r7, #20]
 8001bb8:	621a      	str	r2, [r3, #32]
}
 8001bba:	bf00      	nop
 8001bbc:	371c      	adds	r7, #28
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bc80      	pop	{r7}
 8001bc2:	4770      	bx	lr

08001bc4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b087      	sub	sp, #28
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	60f8      	str	r0, [r7, #12]
 8001bcc:	60b9      	str	r1, [r7, #8]
 8001bce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	6a1b      	ldr	r3, [r3, #32]
 8001bd4:	f023 0210 	bic.w	r2, r3, #16
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	699b      	ldr	r3, [r3, #24]
 8001be0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	6a1b      	ldr	r3, [r3, #32]
 8001be6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001bee:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	031b      	lsls	r3, r3, #12
 8001bf4:	697a      	ldr	r2, [r7, #20]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001c00:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	011b      	lsls	r3, r3, #4
 8001c06:	693a      	ldr	r2, [r7, #16]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	697a      	ldr	r2, [r7, #20]
 8001c10:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	693a      	ldr	r2, [r7, #16]
 8001c16:	621a      	str	r2, [r3, #32]
}
 8001c18:	bf00      	nop
 8001c1a:	371c      	adds	r7, #28
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bc80      	pop	{r7}
 8001c20:	4770      	bx	lr

08001c22 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001c22:	b480      	push	{r7}
 8001c24:	b085      	sub	sp, #20
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
 8001c2a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c38:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001c3a:	683a      	ldr	r2, [r7, #0]
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	f043 0307 	orr.w	r3, r3, #7
 8001c44:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	68fa      	ldr	r2, [r7, #12]
 8001c4a:	609a      	str	r2, [r3, #8]
}
 8001c4c:	bf00      	nop
 8001c4e:	3714      	adds	r7, #20
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bc80      	pop	{r7}
 8001c54:	4770      	bx	lr

08001c56 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001c56:	b480      	push	{r7}
 8001c58:	b087      	sub	sp, #28
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	60f8      	str	r0, [r7, #12]
 8001c5e:	60b9      	str	r1, [r7, #8]
 8001c60:	607a      	str	r2, [r7, #4]
 8001c62:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001c70:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	021a      	lsls	r2, r3, #8
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	431a      	orrs	r2, r3
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	697a      	ldr	r2, [r7, #20]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	697a      	ldr	r2, [r7, #20]
 8001c88:	609a      	str	r2, [r3, #8]
}
 8001c8a:	bf00      	nop
 8001c8c:	371c      	adds	r7, #28
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bc80      	pop	{r7}
 8001c92:	4770      	bx	lr

08001c94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b085      	sub	sp, #20
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d101      	bne.n	8001cac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001ca8:	2302      	movs	r3, #2
 8001caa:	e046      	b.n	8001d3a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2201      	movs	r2, #1
 8001cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2202      	movs	r2, #2
 8001cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cd2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	68fa      	ldr	r2, [r7, #12]
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	68fa      	ldr	r2, [r7, #12]
 8001ce4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a16      	ldr	r2, [pc, #88]	; (8001d44 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d00e      	beq.n	8001d0e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cf8:	d009      	beq.n	8001d0e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a12      	ldr	r2, [pc, #72]	; (8001d48 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d004      	beq.n	8001d0e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a10      	ldr	r2, [pc, #64]	; (8001d4c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d10c      	bne.n	8001d28 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001d14:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	68ba      	ldr	r2, [r7, #8]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	68ba      	ldr	r2, [r7, #8]
 8001d26:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2200      	movs	r2, #0
 8001d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3714      	adds	r7, #20
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bc80      	pop	{r7}
 8001d42:	4770      	bx	lr
 8001d44:	40012c00 	.word	0x40012c00
 8001d48:	40000400 	.word	0x40000400
 8001d4c:	40000800 	.word	0x40000800

08001d50 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001d58:	bf00      	nop
 8001d5a:	370c      	adds	r7, #12
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bc80      	pop	{r7}
 8001d60:	4770      	bx	lr

08001d62 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001d62:	b480      	push	{r7}
 8001d64:	b083      	sub	sp, #12
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001d6a:	bf00      	nop
 8001d6c:	370c      	adds	r7, #12
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bc80      	pop	{r7}
 8001d72:	4770      	bx	lr

08001d74 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d101      	bne.n	8001d86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e03f      	b.n	8001e06 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d106      	bne.n	8001da0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f7fe fbd8 	bl	8000550 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2224      	movs	r2, #36	; 0x24
 8001da4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	68da      	ldr	r2, [r3, #12]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001db6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f000 f905 	bl	8001fc8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	691a      	ldr	r2, [r3, #16]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001dcc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	695a      	ldr	r2, [r3, #20]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001ddc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	68da      	ldr	r2, [r3, #12]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001dec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2200      	movs	r2, #0
 8001df2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2220      	movs	r2, #32
 8001df8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2220      	movs	r2, #32
 8001e00:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b08a      	sub	sp, #40	; 0x28
 8001e12:	af02      	add	r7, sp, #8
 8001e14:	60f8      	str	r0, [r7, #12]
 8001e16:	60b9      	str	r1, [r7, #8]
 8001e18:	603b      	str	r3, [r7, #0]
 8001e1a:	4613      	mov	r3, r2
 8001e1c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	2b20      	cmp	r3, #32
 8001e2c:	d17c      	bne.n	8001f28 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d002      	beq.n	8001e3a <HAL_UART_Transmit+0x2c>
 8001e34:	88fb      	ldrh	r3, [r7, #6]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d101      	bne.n	8001e3e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e075      	b.n	8001f2a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d101      	bne.n	8001e4c <HAL_UART_Transmit+0x3e>
 8001e48:	2302      	movs	r3, #2
 8001e4a:	e06e      	b.n	8001f2a <HAL_UART_Transmit+0x11c>
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2201      	movs	r2, #1
 8001e50:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2200      	movs	r2, #0
 8001e58:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	2221      	movs	r2, #33	; 0x21
 8001e5e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001e62:	f7fe fcc1 	bl	80007e8 <HAL_GetTick>
 8001e66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	88fa      	ldrh	r2, [r7, #6]
 8001e6c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	88fa      	ldrh	r2, [r7, #6]
 8001e72:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e7c:	d108      	bne.n	8001e90 <HAL_UART_Transmit+0x82>
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	691b      	ldr	r3, [r3, #16]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d104      	bne.n	8001e90 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001e86:	2300      	movs	r3, #0
 8001e88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	61bb      	str	r3, [r7, #24]
 8001e8e:	e003      	b.n	8001e98 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001e94:	2300      	movs	r3, #0
 8001e96:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8001ea0:	e02a      	b.n	8001ef8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	9300      	str	r3, [sp, #0]
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	2180      	movs	r1, #128	; 0x80
 8001eac:	68f8      	ldr	r0, [r7, #12]
 8001eae:	f000 f840 	bl	8001f32 <UART_WaitOnFlagUntilTimeout>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d001      	beq.n	8001ebc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	e036      	b.n	8001f2a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d10b      	bne.n	8001eda <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001ec2:	69bb      	ldr	r3, [r7, #24]
 8001ec4:	881b      	ldrh	r3, [r3, #0]
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001ed0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001ed2:	69bb      	ldr	r3, [r7, #24]
 8001ed4:	3302      	adds	r3, #2
 8001ed6:	61bb      	str	r3, [r7, #24]
 8001ed8:	e007      	b.n	8001eea <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	781a      	ldrb	r2, [r3, #0]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001ee4:	69fb      	ldr	r3, [r7, #28]
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001eee:	b29b      	uxth	r3, r3
 8001ef0:	3b01      	subs	r3, #1
 8001ef2:	b29a      	uxth	r2, r3
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001efc:	b29b      	uxth	r3, r3
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d1cf      	bne.n	8001ea2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	9300      	str	r3, [sp, #0]
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	2140      	movs	r1, #64	; 0x40
 8001f0c:	68f8      	ldr	r0, [r7, #12]
 8001f0e:	f000 f810 	bl	8001f32 <UART_WaitOnFlagUntilTimeout>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d001      	beq.n	8001f1c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	e006      	b.n	8001f2a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2220      	movs	r2, #32
 8001f20:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8001f24:	2300      	movs	r3, #0
 8001f26:	e000      	b.n	8001f2a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001f28:	2302      	movs	r3, #2
  }
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3720      	adds	r7, #32
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}

08001f32 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001f32:	b580      	push	{r7, lr}
 8001f34:	b084      	sub	sp, #16
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	60f8      	str	r0, [r7, #12]
 8001f3a:	60b9      	str	r1, [r7, #8]
 8001f3c:	603b      	str	r3, [r7, #0]
 8001f3e:	4613      	mov	r3, r2
 8001f40:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f42:	e02c      	b.n	8001f9e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f4a:	d028      	beq.n	8001f9e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d007      	beq.n	8001f62 <UART_WaitOnFlagUntilTimeout+0x30>
 8001f52:	f7fe fc49 	bl	80007e8 <HAL_GetTick>
 8001f56:	4602      	mov	r2, r0
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	d21d      	bcs.n	8001f9e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	68da      	ldr	r2, [r3, #12]
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001f70:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	695a      	ldr	r2, [r3, #20]
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f022 0201 	bic.w	r2, r2, #1
 8001f80:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2220      	movs	r2, #32
 8001f86:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2220      	movs	r2, #32
 8001f8e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2200      	movs	r2, #0
 8001f96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e00f      	b.n	8001fbe <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	68ba      	ldr	r2, [r7, #8]
 8001faa:	429a      	cmp	r2, r3
 8001fac:	bf0c      	ite	eq
 8001fae:	2301      	moveq	r3, #1
 8001fb0:	2300      	movne	r3, #0
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	79fb      	ldrb	r3, [r7, #7]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d0c3      	beq.n	8001f44 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001fbc:	2300      	movs	r3, #0
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3710      	adds	r7, #16
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
	...

08001fc8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b084      	sub	sp, #16
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	691b      	ldr	r3, [r3, #16]
 8001fd6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	68da      	ldr	r2, [r3, #12]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	430a      	orrs	r2, r1
 8001fe4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	689a      	ldr	r2, [r3, #8]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	691b      	ldr	r3, [r3, #16]
 8001fee:	431a      	orrs	r2, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	695b      	ldr	r3, [r3, #20]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	68db      	ldr	r3, [r3, #12]
 8001ffe:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002002:	f023 030c 	bic.w	r3, r3, #12
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	6812      	ldr	r2, [r2, #0]
 800200a:	68b9      	ldr	r1, [r7, #8]
 800200c:	430b      	orrs	r3, r1
 800200e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	695b      	ldr	r3, [r3, #20]
 8002016:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	699a      	ldr	r2, [r3, #24]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	430a      	orrs	r2, r1
 8002024:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a2c      	ldr	r2, [pc, #176]	; (80020dc <UART_SetConfig+0x114>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d103      	bne.n	8002038 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002030:	f7ff fa80 	bl	8001534 <HAL_RCC_GetPCLK2Freq>
 8002034:	60f8      	str	r0, [r7, #12]
 8002036:	e002      	b.n	800203e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002038:	f7ff fa68 	bl	800150c <HAL_RCC_GetPCLK1Freq>
 800203c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800203e:	68fa      	ldr	r2, [r7, #12]
 8002040:	4613      	mov	r3, r2
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	4413      	add	r3, r2
 8002046:	009a      	lsls	r2, r3, #2
 8002048:	441a      	add	r2, r3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	fbb2 f3f3 	udiv	r3, r2, r3
 8002054:	4a22      	ldr	r2, [pc, #136]	; (80020e0 <UART_SetConfig+0x118>)
 8002056:	fba2 2303 	umull	r2, r3, r2, r3
 800205a:	095b      	lsrs	r3, r3, #5
 800205c:	0119      	lsls	r1, r3, #4
 800205e:	68fa      	ldr	r2, [r7, #12]
 8002060:	4613      	mov	r3, r2
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	4413      	add	r3, r2
 8002066:	009a      	lsls	r2, r3, #2
 8002068:	441a      	add	r2, r3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	fbb2 f2f3 	udiv	r2, r2, r3
 8002074:	4b1a      	ldr	r3, [pc, #104]	; (80020e0 <UART_SetConfig+0x118>)
 8002076:	fba3 0302 	umull	r0, r3, r3, r2
 800207a:	095b      	lsrs	r3, r3, #5
 800207c:	2064      	movs	r0, #100	; 0x64
 800207e:	fb00 f303 	mul.w	r3, r0, r3
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	011b      	lsls	r3, r3, #4
 8002086:	3332      	adds	r3, #50	; 0x32
 8002088:	4a15      	ldr	r2, [pc, #84]	; (80020e0 <UART_SetConfig+0x118>)
 800208a:	fba2 2303 	umull	r2, r3, r2, r3
 800208e:	095b      	lsrs	r3, r3, #5
 8002090:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002094:	4419      	add	r1, r3
 8002096:	68fa      	ldr	r2, [r7, #12]
 8002098:	4613      	mov	r3, r2
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	4413      	add	r3, r2
 800209e:	009a      	lsls	r2, r3, #2
 80020a0:	441a      	add	r2, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80020ac:	4b0c      	ldr	r3, [pc, #48]	; (80020e0 <UART_SetConfig+0x118>)
 80020ae:	fba3 0302 	umull	r0, r3, r3, r2
 80020b2:	095b      	lsrs	r3, r3, #5
 80020b4:	2064      	movs	r0, #100	; 0x64
 80020b6:	fb00 f303 	mul.w	r3, r0, r3
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	011b      	lsls	r3, r3, #4
 80020be:	3332      	adds	r3, #50	; 0x32
 80020c0:	4a07      	ldr	r2, [pc, #28]	; (80020e0 <UART_SetConfig+0x118>)
 80020c2:	fba2 2303 	umull	r2, r3, r2, r3
 80020c6:	095b      	lsrs	r3, r3, #5
 80020c8:	f003 020f 	and.w	r2, r3, #15
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	440a      	add	r2, r1
 80020d2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80020d4:	bf00      	nop
 80020d6:	3710      	adds	r7, #16
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	40013800 	.word	0x40013800
 80020e0:	51eb851f 	.word	0x51eb851f

080020e4 <__errno>:
 80020e4:	4b01      	ldr	r3, [pc, #4]	; (80020ec <__errno+0x8>)
 80020e6:	6818      	ldr	r0, [r3, #0]
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	2000000c 	.word	0x2000000c

080020f0 <__libc_init_array>:
 80020f0:	b570      	push	{r4, r5, r6, lr}
 80020f2:	2500      	movs	r5, #0
 80020f4:	4e0c      	ldr	r6, [pc, #48]	; (8002128 <__libc_init_array+0x38>)
 80020f6:	4c0d      	ldr	r4, [pc, #52]	; (800212c <__libc_init_array+0x3c>)
 80020f8:	1ba4      	subs	r4, r4, r6
 80020fa:	10a4      	asrs	r4, r4, #2
 80020fc:	42a5      	cmp	r5, r4
 80020fe:	d109      	bne.n	8002114 <__libc_init_array+0x24>
 8002100:	f000 fc34 	bl	800296c <_init>
 8002104:	2500      	movs	r5, #0
 8002106:	4e0a      	ldr	r6, [pc, #40]	; (8002130 <__libc_init_array+0x40>)
 8002108:	4c0a      	ldr	r4, [pc, #40]	; (8002134 <__libc_init_array+0x44>)
 800210a:	1ba4      	subs	r4, r4, r6
 800210c:	10a4      	asrs	r4, r4, #2
 800210e:	42a5      	cmp	r5, r4
 8002110:	d105      	bne.n	800211e <__libc_init_array+0x2e>
 8002112:	bd70      	pop	{r4, r5, r6, pc}
 8002114:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002118:	4798      	blx	r3
 800211a:	3501      	adds	r5, #1
 800211c:	e7ee      	b.n	80020fc <__libc_init_array+0xc>
 800211e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002122:	4798      	blx	r3
 8002124:	3501      	adds	r5, #1
 8002126:	e7f2      	b.n	800210e <__libc_init_array+0x1e>
 8002128:	080029ec 	.word	0x080029ec
 800212c:	080029ec 	.word	0x080029ec
 8002130:	080029ec 	.word	0x080029ec
 8002134:	080029f0 	.word	0x080029f0

08002138 <memset>:
 8002138:	4603      	mov	r3, r0
 800213a:	4402      	add	r2, r0
 800213c:	4293      	cmp	r3, r2
 800213e:	d100      	bne.n	8002142 <memset+0xa>
 8002140:	4770      	bx	lr
 8002142:	f803 1b01 	strb.w	r1, [r3], #1
 8002146:	e7f9      	b.n	800213c <memset+0x4>

08002148 <siprintf>:
 8002148:	b40e      	push	{r1, r2, r3}
 800214a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800214e:	b500      	push	{lr}
 8002150:	b09c      	sub	sp, #112	; 0x70
 8002152:	ab1d      	add	r3, sp, #116	; 0x74
 8002154:	9002      	str	r0, [sp, #8]
 8002156:	9006      	str	r0, [sp, #24]
 8002158:	9107      	str	r1, [sp, #28]
 800215a:	9104      	str	r1, [sp, #16]
 800215c:	4808      	ldr	r0, [pc, #32]	; (8002180 <siprintf+0x38>)
 800215e:	4909      	ldr	r1, [pc, #36]	; (8002184 <siprintf+0x3c>)
 8002160:	f853 2b04 	ldr.w	r2, [r3], #4
 8002164:	9105      	str	r1, [sp, #20]
 8002166:	6800      	ldr	r0, [r0, #0]
 8002168:	a902      	add	r1, sp, #8
 800216a:	9301      	str	r3, [sp, #4]
 800216c:	f000 f866 	bl	800223c <_svfiprintf_r>
 8002170:	2200      	movs	r2, #0
 8002172:	9b02      	ldr	r3, [sp, #8]
 8002174:	701a      	strb	r2, [r3, #0]
 8002176:	b01c      	add	sp, #112	; 0x70
 8002178:	f85d eb04 	ldr.w	lr, [sp], #4
 800217c:	b003      	add	sp, #12
 800217e:	4770      	bx	lr
 8002180:	2000000c 	.word	0x2000000c
 8002184:	ffff0208 	.word	0xffff0208

08002188 <__ssputs_r>:
 8002188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800218c:	688e      	ldr	r6, [r1, #8]
 800218e:	4682      	mov	sl, r0
 8002190:	429e      	cmp	r6, r3
 8002192:	460c      	mov	r4, r1
 8002194:	4690      	mov	r8, r2
 8002196:	4699      	mov	r9, r3
 8002198:	d837      	bhi.n	800220a <__ssputs_r+0x82>
 800219a:	898a      	ldrh	r2, [r1, #12]
 800219c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80021a0:	d031      	beq.n	8002206 <__ssputs_r+0x7e>
 80021a2:	2302      	movs	r3, #2
 80021a4:	6825      	ldr	r5, [r4, #0]
 80021a6:	6909      	ldr	r1, [r1, #16]
 80021a8:	1a6f      	subs	r7, r5, r1
 80021aa:	6965      	ldr	r5, [r4, #20]
 80021ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80021b0:	fb95 f5f3 	sdiv	r5, r5, r3
 80021b4:	f109 0301 	add.w	r3, r9, #1
 80021b8:	443b      	add	r3, r7
 80021ba:	429d      	cmp	r5, r3
 80021bc:	bf38      	it	cc
 80021be:	461d      	movcc	r5, r3
 80021c0:	0553      	lsls	r3, r2, #21
 80021c2:	d530      	bpl.n	8002226 <__ssputs_r+0x9e>
 80021c4:	4629      	mov	r1, r5
 80021c6:	f000 fb37 	bl	8002838 <_malloc_r>
 80021ca:	4606      	mov	r6, r0
 80021cc:	b950      	cbnz	r0, 80021e4 <__ssputs_r+0x5c>
 80021ce:	230c      	movs	r3, #12
 80021d0:	f04f 30ff 	mov.w	r0, #4294967295
 80021d4:	f8ca 3000 	str.w	r3, [sl]
 80021d8:	89a3      	ldrh	r3, [r4, #12]
 80021da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021de:	81a3      	strh	r3, [r4, #12]
 80021e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80021e4:	463a      	mov	r2, r7
 80021e6:	6921      	ldr	r1, [r4, #16]
 80021e8:	f000 fab6 	bl	8002758 <memcpy>
 80021ec:	89a3      	ldrh	r3, [r4, #12]
 80021ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80021f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021f6:	81a3      	strh	r3, [r4, #12]
 80021f8:	6126      	str	r6, [r4, #16]
 80021fa:	443e      	add	r6, r7
 80021fc:	6026      	str	r6, [r4, #0]
 80021fe:	464e      	mov	r6, r9
 8002200:	6165      	str	r5, [r4, #20]
 8002202:	1bed      	subs	r5, r5, r7
 8002204:	60a5      	str	r5, [r4, #8]
 8002206:	454e      	cmp	r6, r9
 8002208:	d900      	bls.n	800220c <__ssputs_r+0x84>
 800220a:	464e      	mov	r6, r9
 800220c:	4632      	mov	r2, r6
 800220e:	4641      	mov	r1, r8
 8002210:	6820      	ldr	r0, [r4, #0]
 8002212:	f000 faac 	bl	800276e <memmove>
 8002216:	68a3      	ldr	r3, [r4, #8]
 8002218:	2000      	movs	r0, #0
 800221a:	1b9b      	subs	r3, r3, r6
 800221c:	60a3      	str	r3, [r4, #8]
 800221e:	6823      	ldr	r3, [r4, #0]
 8002220:	441e      	add	r6, r3
 8002222:	6026      	str	r6, [r4, #0]
 8002224:	e7dc      	b.n	80021e0 <__ssputs_r+0x58>
 8002226:	462a      	mov	r2, r5
 8002228:	f000 fb60 	bl	80028ec <_realloc_r>
 800222c:	4606      	mov	r6, r0
 800222e:	2800      	cmp	r0, #0
 8002230:	d1e2      	bne.n	80021f8 <__ssputs_r+0x70>
 8002232:	6921      	ldr	r1, [r4, #16]
 8002234:	4650      	mov	r0, sl
 8002236:	f000 fab3 	bl	80027a0 <_free_r>
 800223a:	e7c8      	b.n	80021ce <__ssputs_r+0x46>

0800223c <_svfiprintf_r>:
 800223c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002240:	461d      	mov	r5, r3
 8002242:	898b      	ldrh	r3, [r1, #12]
 8002244:	b09d      	sub	sp, #116	; 0x74
 8002246:	061f      	lsls	r7, r3, #24
 8002248:	4680      	mov	r8, r0
 800224a:	460c      	mov	r4, r1
 800224c:	4616      	mov	r6, r2
 800224e:	d50f      	bpl.n	8002270 <_svfiprintf_r+0x34>
 8002250:	690b      	ldr	r3, [r1, #16]
 8002252:	b96b      	cbnz	r3, 8002270 <_svfiprintf_r+0x34>
 8002254:	2140      	movs	r1, #64	; 0x40
 8002256:	f000 faef 	bl	8002838 <_malloc_r>
 800225a:	6020      	str	r0, [r4, #0]
 800225c:	6120      	str	r0, [r4, #16]
 800225e:	b928      	cbnz	r0, 800226c <_svfiprintf_r+0x30>
 8002260:	230c      	movs	r3, #12
 8002262:	f8c8 3000 	str.w	r3, [r8]
 8002266:	f04f 30ff 	mov.w	r0, #4294967295
 800226a:	e0c8      	b.n	80023fe <_svfiprintf_r+0x1c2>
 800226c:	2340      	movs	r3, #64	; 0x40
 800226e:	6163      	str	r3, [r4, #20]
 8002270:	2300      	movs	r3, #0
 8002272:	9309      	str	r3, [sp, #36]	; 0x24
 8002274:	2320      	movs	r3, #32
 8002276:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800227a:	2330      	movs	r3, #48	; 0x30
 800227c:	f04f 0b01 	mov.w	fp, #1
 8002280:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002284:	9503      	str	r5, [sp, #12]
 8002286:	4637      	mov	r7, r6
 8002288:	463d      	mov	r5, r7
 800228a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800228e:	b10b      	cbz	r3, 8002294 <_svfiprintf_r+0x58>
 8002290:	2b25      	cmp	r3, #37	; 0x25
 8002292:	d13e      	bne.n	8002312 <_svfiprintf_r+0xd6>
 8002294:	ebb7 0a06 	subs.w	sl, r7, r6
 8002298:	d00b      	beq.n	80022b2 <_svfiprintf_r+0x76>
 800229a:	4653      	mov	r3, sl
 800229c:	4632      	mov	r2, r6
 800229e:	4621      	mov	r1, r4
 80022a0:	4640      	mov	r0, r8
 80022a2:	f7ff ff71 	bl	8002188 <__ssputs_r>
 80022a6:	3001      	adds	r0, #1
 80022a8:	f000 80a4 	beq.w	80023f4 <_svfiprintf_r+0x1b8>
 80022ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80022ae:	4453      	add	r3, sl
 80022b0:	9309      	str	r3, [sp, #36]	; 0x24
 80022b2:	783b      	ldrb	r3, [r7, #0]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	f000 809d 	beq.w	80023f4 <_svfiprintf_r+0x1b8>
 80022ba:	2300      	movs	r3, #0
 80022bc:	f04f 32ff 	mov.w	r2, #4294967295
 80022c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80022c4:	9304      	str	r3, [sp, #16]
 80022c6:	9307      	str	r3, [sp, #28]
 80022c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80022cc:	931a      	str	r3, [sp, #104]	; 0x68
 80022ce:	462f      	mov	r7, r5
 80022d0:	2205      	movs	r2, #5
 80022d2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80022d6:	4850      	ldr	r0, [pc, #320]	; (8002418 <_svfiprintf_r+0x1dc>)
 80022d8:	f000 fa30 	bl	800273c <memchr>
 80022dc:	9b04      	ldr	r3, [sp, #16]
 80022de:	b9d0      	cbnz	r0, 8002316 <_svfiprintf_r+0xda>
 80022e0:	06d9      	lsls	r1, r3, #27
 80022e2:	bf44      	itt	mi
 80022e4:	2220      	movmi	r2, #32
 80022e6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80022ea:	071a      	lsls	r2, r3, #28
 80022ec:	bf44      	itt	mi
 80022ee:	222b      	movmi	r2, #43	; 0x2b
 80022f0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80022f4:	782a      	ldrb	r2, [r5, #0]
 80022f6:	2a2a      	cmp	r2, #42	; 0x2a
 80022f8:	d015      	beq.n	8002326 <_svfiprintf_r+0xea>
 80022fa:	462f      	mov	r7, r5
 80022fc:	2000      	movs	r0, #0
 80022fe:	250a      	movs	r5, #10
 8002300:	9a07      	ldr	r2, [sp, #28]
 8002302:	4639      	mov	r1, r7
 8002304:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002308:	3b30      	subs	r3, #48	; 0x30
 800230a:	2b09      	cmp	r3, #9
 800230c:	d94d      	bls.n	80023aa <_svfiprintf_r+0x16e>
 800230e:	b1b8      	cbz	r0, 8002340 <_svfiprintf_r+0x104>
 8002310:	e00f      	b.n	8002332 <_svfiprintf_r+0xf6>
 8002312:	462f      	mov	r7, r5
 8002314:	e7b8      	b.n	8002288 <_svfiprintf_r+0x4c>
 8002316:	4a40      	ldr	r2, [pc, #256]	; (8002418 <_svfiprintf_r+0x1dc>)
 8002318:	463d      	mov	r5, r7
 800231a:	1a80      	subs	r0, r0, r2
 800231c:	fa0b f000 	lsl.w	r0, fp, r0
 8002320:	4318      	orrs	r0, r3
 8002322:	9004      	str	r0, [sp, #16]
 8002324:	e7d3      	b.n	80022ce <_svfiprintf_r+0x92>
 8002326:	9a03      	ldr	r2, [sp, #12]
 8002328:	1d11      	adds	r1, r2, #4
 800232a:	6812      	ldr	r2, [r2, #0]
 800232c:	9103      	str	r1, [sp, #12]
 800232e:	2a00      	cmp	r2, #0
 8002330:	db01      	blt.n	8002336 <_svfiprintf_r+0xfa>
 8002332:	9207      	str	r2, [sp, #28]
 8002334:	e004      	b.n	8002340 <_svfiprintf_r+0x104>
 8002336:	4252      	negs	r2, r2
 8002338:	f043 0302 	orr.w	r3, r3, #2
 800233c:	9207      	str	r2, [sp, #28]
 800233e:	9304      	str	r3, [sp, #16]
 8002340:	783b      	ldrb	r3, [r7, #0]
 8002342:	2b2e      	cmp	r3, #46	; 0x2e
 8002344:	d10c      	bne.n	8002360 <_svfiprintf_r+0x124>
 8002346:	787b      	ldrb	r3, [r7, #1]
 8002348:	2b2a      	cmp	r3, #42	; 0x2a
 800234a:	d133      	bne.n	80023b4 <_svfiprintf_r+0x178>
 800234c:	9b03      	ldr	r3, [sp, #12]
 800234e:	3702      	adds	r7, #2
 8002350:	1d1a      	adds	r2, r3, #4
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	9203      	str	r2, [sp, #12]
 8002356:	2b00      	cmp	r3, #0
 8002358:	bfb8      	it	lt
 800235a:	f04f 33ff 	movlt.w	r3, #4294967295
 800235e:	9305      	str	r3, [sp, #20]
 8002360:	4d2e      	ldr	r5, [pc, #184]	; (800241c <_svfiprintf_r+0x1e0>)
 8002362:	2203      	movs	r2, #3
 8002364:	7839      	ldrb	r1, [r7, #0]
 8002366:	4628      	mov	r0, r5
 8002368:	f000 f9e8 	bl	800273c <memchr>
 800236c:	b138      	cbz	r0, 800237e <_svfiprintf_r+0x142>
 800236e:	2340      	movs	r3, #64	; 0x40
 8002370:	1b40      	subs	r0, r0, r5
 8002372:	fa03 f000 	lsl.w	r0, r3, r0
 8002376:	9b04      	ldr	r3, [sp, #16]
 8002378:	3701      	adds	r7, #1
 800237a:	4303      	orrs	r3, r0
 800237c:	9304      	str	r3, [sp, #16]
 800237e:	7839      	ldrb	r1, [r7, #0]
 8002380:	2206      	movs	r2, #6
 8002382:	4827      	ldr	r0, [pc, #156]	; (8002420 <_svfiprintf_r+0x1e4>)
 8002384:	1c7e      	adds	r6, r7, #1
 8002386:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800238a:	f000 f9d7 	bl	800273c <memchr>
 800238e:	2800      	cmp	r0, #0
 8002390:	d038      	beq.n	8002404 <_svfiprintf_r+0x1c8>
 8002392:	4b24      	ldr	r3, [pc, #144]	; (8002424 <_svfiprintf_r+0x1e8>)
 8002394:	bb13      	cbnz	r3, 80023dc <_svfiprintf_r+0x1a0>
 8002396:	9b03      	ldr	r3, [sp, #12]
 8002398:	3307      	adds	r3, #7
 800239a:	f023 0307 	bic.w	r3, r3, #7
 800239e:	3308      	adds	r3, #8
 80023a0:	9303      	str	r3, [sp, #12]
 80023a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80023a4:	444b      	add	r3, r9
 80023a6:	9309      	str	r3, [sp, #36]	; 0x24
 80023a8:	e76d      	b.n	8002286 <_svfiprintf_r+0x4a>
 80023aa:	fb05 3202 	mla	r2, r5, r2, r3
 80023ae:	2001      	movs	r0, #1
 80023b0:	460f      	mov	r7, r1
 80023b2:	e7a6      	b.n	8002302 <_svfiprintf_r+0xc6>
 80023b4:	2300      	movs	r3, #0
 80023b6:	250a      	movs	r5, #10
 80023b8:	4619      	mov	r1, r3
 80023ba:	3701      	adds	r7, #1
 80023bc:	9305      	str	r3, [sp, #20]
 80023be:	4638      	mov	r0, r7
 80023c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80023c4:	3a30      	subs	r2, #48	; 0x30
 80023c6:	2a09      	cmp	r2, #9
 80023c8:	d903      	bls.n	80023d2 <_svfiprintf_r+0x196>
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d0c8      	beq.n	8002360 <_svfiprintf_r+0x124>
 80023ce:	9105      	str	r1, [sp, #20]
 80023d0:	e7c6      	b.n	8002360 <_svfiprintf_r+0x124>
 80023d2:	fb05 2101 	mla	r1, r5, r1, r2
 80023d6:	2301      	movs	r3, #1
 80023d8:	4607      	mov	r7, r0
 80023da:	e7f0      	b.n	80023be <_svfiprintf_r+0x182>
 80023dc:	ab03      	add	r3, sp, #12
 80023de:	9300      	str	r3, [sp, #0]
 80023e0:	4622      	mov	r2, r4
 80023e2:	4b11      	ldr	r3, [pc, #68]	; (8002428 <_svfiprintf_r+0x1ec>)
 80023e4:	a904      	add	r1, sp, #16
 80023e6:	4640      	mov	r0, r8
 80023e8:	f3af 8000 	nop.w
 80023ec:	f1b0 3fff 	cmp.w	r0, #4294967295
 80023f0:	4681      	mov	r9, r0
 80023f2:	d1d6      	bne.n	80023a2 <_svfiprintf_r+0x166>
 80023f4:	89a3      	ldrh	r3, [r4, #12]
 80023f6:	065b      	lsls	r3, r3, #25
 80023f8:	f53f af35 	bmi.w	8002266 <_svfiprintf_r+0x2a>
 80023fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80023fe:	b01d      	add	sp, #116	; 0x74
 8002400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002404:	ab03      	add	r3, sp, #12
 8002406:	9300      	str	r3, [sp, #0]
 8002408:	4622      	mov	r2, r4
 800240a:	4b07      	ldr	r3, [pc, #28]	; (8002428 <_svfiprintf_r+0x1ec>)
 800240c:	a904      	add	r1, sp, #16
 800240e:	4640      	mov	r0, r8
 8002410:	f000 f882 	bl	8002518 <_printf_i>
 8002414:	e7ea      	b.n	80023ec <_svfiprintf_r+0x1b0>
 8002416:	bf00      	nop
 8002418:	080029b8 	.word	0x080029b8
 800241c:	080029be 	.word	0x080029be
 8002420:	080029c2 	.word	0x080029c2
 8002424:	00000000 	.word	0x00000000
 8002428:	08002189 	.word	0x08002189

0800242c <_printf_common>:
 800242c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002430:	4691      	mov	r9, r2
 8002432:	461f      	mov	r7, r3
 8002434:	688a      	ldr	r2, [r1, #8]
 8002436:	690b      	ldr	r3, [r1, #16]
 8002438:	4606      	mov	r6, r0
 800243a:	4293      	cmp	r3, r2
 800243c:	bfb8      	it	lt
 800243e:	4613      	movlt	r3, r2
 8002440:	f8c9 3000 	str.w	r3, [r9]
 8002444:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002448:	460c      	mov	r4, r1
 800244a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800244e:	b112      	cbz	r2, 8002456 <_printf_common+0x2a>
 8002450:	3301      	adds	r3, #1
 8002452:	f8c9 3000 	str.w	r3, [r9]
 8002456:	6823      	ldr	r3, [r4, #0]
 8002458:	0699      	lsls	r1, r3, #26
 800245a:	bf42      	ittt	mi
 800245c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002460:	3302      	addmi	r3, #2
 8002462:	f8c9 3000 	strmi.w	r3, [r9]
 8002466:	6825      	ldr	r5, [r4, #0]
 8002468:	f015 0506 	ands.w	r5, r5, #6
 800246c:	d107      	bne.n	800247e <_printf_common+0x52>
 800246e:	f104 0a19 	add.w	sl, r4, #25
 8002472:	68e3      	ldr	r3, [r4, #12]
 8002474:	f8d9 2000 	ldr.w	r2, [r9]
 8002478:	1a9b      	subs	r3, r3, r2
 800247a:	42ab      	cmp	r3, r5
 800247c:	dc29      	bgt.n	80024d2 <_printf_common+0xa6>
 800247e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002482:	6822      	ldr	r2, [r4, #0]
 8002484:	3300      	adds	r3, #0
 8002486:	bf18      	it	ne
 8002488:	2301      	movne	r3, #1
 800248a:	0692      	lsls	r2, r2, #26
 800248c:	d42e      	bmi.n	80024ec <_printf_common+0xc0>
 800248e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002492:	4639      	mov	r1, r7
 8002494:	4630      	mov	r0, r6
 8002496:	47c0      	blx	r8
 8002498:	3001      	adds	r0, #1
 800249a:	d021      	beq.n	80024e0 <_printf_common+0xb4>
 800249c:	6823      	ldr	r3, [r4, #0]
 800249e:	68e5      	ldr	r5, [r4, #12]
 80024a0:	f003 0306 	and.w	r3, r3, #6
 80024a4:	2b04      	cmp	r3, #4
 80024a6:	bf18      	it	ne
 80024a8:	2500      	movne	r5, #0
 80024aa:	f8d9 2000 	ldr.w	r2, [r9]
 80024ae:	f04f 0900 	mov.w	r9, #0
 80024b2:	bf08      	it	eq
 80024b4:	1aad      	subeq	r5, r5, r2
 80024b6:	68a3      	ldr	r3, [r4, #8]
 80024b8:	6922      	ldr	r2, [r4, #16]
 80024ba:	bf08      	it	eq
 80024bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80024c0:	4293      	cmp	r3, r2
 80024c2:	bfc4      	itt	gt
 80024c4:	1a9b      	subgt	r3, r3, r2
 80024c6:	18ed      	addgt	r5, r5, r3
 80024c8:	341a      	adds	r4, #26
 80024ca:	454d      	cmp	r5, r9
 80024cc:	d11a      	bne.n	8002504 <_printf_common+0xd8>
 80024ce:	2000      	movs	r0, #0
 80024d0:	e008      	b.n	80024e4 <_printf_common+0xb8>
 80024d2:	2301      	movs	r3, #1
 80024d4:	4652      	mov	r2, sl
 80024d6:	4639      	mov	r1, r7
 80024d8:	4630      	mov	r0, r6
 80024da:	47c0      	blx	r8
 80024dc:	3001      	adds	r0, #1
 80024de:	d103      	bne.n	80024e8 <_printf_common+0xbc>
 80024e0:	f04f 30ff 	mov.w	r0, #4294967295
 80024e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80024e8:	3501      	adds	r5, #1
 80024ea:	e7c2      	b.n	8002472 <_printf_common+0x46>
 80024ec:	2030      	movs	r0, #48	; 0x30
 80024ee:	18e1      	adds	r1, r4, r3
 80024f0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80024f4:	1c5a      	adds	r2, r3, #1
 80024f6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80024fa:	4422      	add	r2, r4
 80024fc:	3302      	adds	r3, #2
 80024fe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002502:	e7c4      	b.n	800248e <_printf_common+0x62>
 8002504:	2301      	movs	r3, #1
 8002506:	4622      	mov	r2, r4
 8002508:	4639      	mov	r1, r7
 800250a:	4630      	mov	r0, r6
 800250c:	47c0      	blx	r8
 800250e:	3001      	adds	r0, #1
 8002510:	d0e6      	beq.n	80024e0 <_printf_common+0xb4>
 8002512:	f109 0901 	add.w	r9, r9, #1
 8002516:	e7d8      	b.n	80024ca <_printf_common+0x9e>

08002518 <_printf_i>:
 8002518:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800251c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002520:	460c      	mov	r4, r1
 8002522:	7e09      	ldrb	r1, [r1, #24]
 8002524:	b085      	sub	sp, #20
 8002526:	296e      	cmp	r1, #110	; 0x6e
 8002528:	4617      	mov	r7, r2
 800252a:	4606      	mov	r6, r0
 800252c:	4698      	mov	r8, r3
 800252e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002530:	f000 80b3 	beq.w	800269a <_printf_i+0x182>
 8002534:	d822      	bhi.n	800257c <_printf_i+0x64>
 8002536:	2963      	cmp	r1, #99	; 0x63
 8002538:	d036      	beq.n	80025a8 <_printf_i+0x90>
 800253a:	d80a      	bhi.n	8002552 <_printf_i+0x3a>
 800253c:	2900      	cmp	r1, #0
 800253e:	f000 80b9 	beq.w	80026b4 <_printf_i+0x19c>
 8002542:	2958      	cmp	r1, #88	; 0x58
 8002544:	f000 8083 	beq.w	800264e <_printf_i+0x136>
 8002548:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800254c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002550:	e032      	b.n	80025b8 <_printf_i+0xa0>
 8002552:	2964      	cmp	r1, #100	; 0x64
 8002554:	d001      	beq.n	800255a <_printf_i+0x42>
 8002556:	2969      	cmp	r1, #105	; 0x69
 8002558:	d1f6      	bne.n	8002548 <_printf_i+0x30>
 800255a:	6820      	ldr	r0, [r4, #0]
 800255c:	6813      	ldr	r3, [r2, #0]
 800255e:	0605      	lsls	r5, r0, #24
 8002560:	f103 0104 	add.w	r1, r3, #4
 8002564:	d52a      	bpl.n	80025bc <_printf_i+0xa4>
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	6011      	str	r1, [r2, #0]
 800256a:	2b00      	cmp	r3, #0
 800256c:	da03      	bge.n	8002576 <_printf_i+0x5e>
 800256e:	222d      	movs	r2, #45	; 0x2d
 8002570:	425b      	negs	r3, r3
 8002572:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002576:	486f      	ldr	r0, [pc, #444]	; (8002734 <_printf_i+0x21c>)
 8002578:	220a      	movs	r2, #10
 800257a:	e039      	b.n	80025f0 <_printf_i+0xd8>
 800257c:	2973      	cmp	r1, #115	; 0x73
 800257e:	f000 809d 	beq.w	80026bc <_printf_i+0x1a4>
 8002582:	d808      	bhi.n	8002596 <_printf_i+0x7e>
 8002584:	296f      	cmp	r1, #111	; 0x6f
 8002586:	d020      	beq.n	80025ca <_printf_i+0xb2>
 8002588:	2970      	cmp	r1, #112	; 0x70
 800258a:	d1dd      	bne.n	8002548 <_printf_i+0x30>
 800258c:	6823      	ldr	r3, [r4, #0]
 800258e:	f043 0320 	orr.w	r3, r3, #32
 8002592:	6023      	str	r3, [r4, #0]
 8002594:	e003      	b.n	800259e <_printf_i+0x86>
 8002596:	2975      	cmp	r1, #117	; 0x75
 8002598:	d017      	beq.n	80025ca <_printf_i+0xb2>
 800259a:	2978      	cmp	r1, #120	; 0x78
 800259c:	d1d4      	bne.n	8002548 <_printf_i+0x30>
 800259e:	2378      	movs	r3, #120	; 0x78
 80025a0:	4865      	ldr	r0, [pc, #404]	; (8002738 <_printf_i+0x220>)
 80025a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80025a6:	e055      	b.n	8002654 <_printf_i+0x13c>
 80025a8:	6813      	ldr	r3, [r2, #0]
 80025aa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80025ae:	1d19      	adds	r1, r3, #4
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	6011      	str	r1, [r2, #0]
 80025b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80025b8:	2301      	movs	r3, #1
 80025ba:	e08c      	b.n	80026d6 <_printf_i+0x1be>
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f010 0f40 	tst.w	r0, #64	; 0x40
 80025c2:	6011      	str	r1, [r2, #0]
 80025c4:	bf18      	it	ne
 80025c6:	b21b      	sxthne	r3, r3
 80025c8:	e7cf      	b.n	800256a <_printf_i+0x52>
 80025ca:	6813      	ldr	r3, [r2, #0]
 80025cc:	6825      	ldr	r5, [r4, #0]
 80025ce:	1d18      	adds	r0, r3, #4
 80025d0:	6010      	str	r0, [r2, #0]
 80025d2:	0628      	lsls	r0, r5, #24
 80025d4:	d501      	bpl.n	80025da <_printf_i+0xc2>
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	e002      	b.n	80025e0 <_printf_i+0xc8>
 80025da:	0668      	lsls	r0, r5, #25
 80025dc:	d5fb      	bpl.n	80025d6 <_printf_i+0xbe>
 80025de:	881b      	ldrh	r3, [r3, #0]
 80025e0:	296f      	cmp	r1, #111	; 0x6f
 80025e2:	bf14      	ite	ne
 80025e4:	220a      	movne	r2, #10
 80025e6:	2208      	moveq	r2, #8
 80025e8:	4852      	ldr	r0, [pc, #328]	; (8002734 <_printf_i+0x21c>)
 80025ea:	2100      	movs	r1, #0
 80025ec:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80025f0:	6865      	ldr	r5, [r4, #4]
 80025f2:	2d00      	cmp	r5, #0
 80025f4:	60a5      	str	r5, [r4, #8]
 80025f6:	f2c0 8095 	blt.w	8002724 <_printf_i+0x20c>
 80025fa:	6821      	ldr	r1, [r4, #0]
 80025fc:	f021 0104 	bic.w	r1, r1, #4
 8002600:	6021      	str	r1, [r4, #0]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d13d      	bne.n	8002682 <_printf_i+0x16a>
 8002606:	2d00      	cmp	r5, #0
 8002608:	f040 808e 	bne.w	8002728 <_printf_i+0x210>
 800260c:	4665      	mov	r5, ip
 800260e:	2a08      	cmp	r2, #8
 8002610:	d10b      	bne.n	800262a <_printf_i+0x112>
 8002612:	6823      	ldr	r3, [r4, #0]
 8002614:	07db      	lsls	r3, r3, #31
 8002616:	d508      	bpl.n	800262a <_printf_i+0x112>
 8002618:	6923      	ldr	r3, [r4, #16]
 800261a:	6862      	ldr	r2, [r4, #4]
 800261c:	429a      	cmp	r2, r3
 800261e:	bfde      	ittt	le
 8002620:	2330      	movle	r3, #48	; 0x30
 8002622:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002626:	f105 35ff 	addle.w	r5, r5, #4294967295
 800262a:	ebac 0305 	sub.w	r3, ip, r5
 800262e:	6123      	str	r3, [r4, #16]
 8002630:	f8cd 8000 	str.w	r8, [sp]
 8002634:	463b      	mov	r3, r7
 8002636:	aa03      	add	r2, sp, #12
 8002638:	4621      	mov	r1, r4
 800263a:	4630      	mov	r0, r6
 800263c:	f7ff fef6 	bl	800242c <_printf_common>
 8002640:	3001      	adds	r0, #1
 8002642:	d14d      	bne.n	80026e0 <_printf_i+0x1c8>
 8002644:	f04f 30ff 	mov.w	r0, #4294967295
 8002648:	b005      	add	sp, #20
 800264a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800264e:	4839      	ldr	r0, [pc, #228]	; (8002734 <_printf_i+0x21c>)
 8002650:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002654:	6813      	ldr	r3, [r2, #0]
 8002656:	6821      	ldr	r1, [r4, #0]
 8002658:	1d1d      	adds	r5, r3, #4
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	6015      	str	r5, [r2, #0]
 800265e:	060a      	lsls	r2, r1, #24
 8002660:	d50b      	bpl.n	800267a <_printf_i+0x162>
 8002662:	07ca      	lsls	r2, r1, #31
 8002664:	bf44      	itt	mi
 8002666:	f041 0120 	orrmi.w	r1, r1, #32
 800266a:	6021      	strmi	r1, [r4, #0]
 800266c:	b91b      	cbnz	r3, 8002676 <_printf_i+0x15e>
 800266e:	6822      	ldr	r2, [r4, #0]
 8002670:	f022 0220 	bic.w	r2, r2, #32
 8002674:	6022      	str	r2, [r4, #0]
 8002676:	2210      	movs	r2, #16
 8002678:	e7b7      	b.n	80025ea <_printf_i+0xd2>
 800267a:	064d      	lsls	r5, r1, #25
 800267c:	bf48      	it	mi
 800267e:	b29b      	uxthmi	r3, r3
 8002680:	e7ef      	b.n	8002662 <_printf_i+0x14a>
 8002682:	4665      	mov	r5, ip
 8002684:	fbb3 f1f2 	udiv	r1, r3, r2
 8002688:	fb02 3311 	mls	r3, r2, r1, r3
 800268c:	5cc3      	ldrb	r3, [r0, r3]
 800268e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002692:	460b      	mov	r3, r1
 8002694:	2900      	cmp	r1, #0
 8002696:	d1f5      	bne.n	8002684 <_printf_i+0x16c>
 8002698:	e7b9      	b.n	800260e <_printf_i+0xf6>
 800269a:	6813      	ldr	r3, [r2, #0]
 800269c:	6825      	ldr	r5, [r4, #0]
 800269e:	1d18      	adds	r0, r3, #4
 80026a0:	6961      	ldr	r1, [r4, #20]
 80026a2:	6010      	str	r0, [r2, #0]
 80026a4:	0628      	lsls	r0, r5, #24
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	d501      	bpl.n	80026ae <_printf_i+0x196>
 80026aa:	6019      	str	r1, [r3, #0]
 80026ac:	e002      	b.n	80026b4 <_printf_i+0x19c>
 80026ae:	066a      	lsls	r2, r5, #25
 80026b0:	d5fb      	bpl.n	80026aa <_printf_i+0x192>
 80026b2:	8019      	strh	r1, [r3, #0]
 80026b4:	2300      	movs	r3, #0
 80026b6:	4665      	mov	r5, ip
 80026b8:	6123      	str	r3, [r4, #16]
 80026ba:	e7b9      	b.n	8002630 <_printf_i+0x118>
 80026bc:	6813      	ldr	r3, [r2, #0]
 80026be:	1d19      	adds	r1, r3, #4
 80026c0:	6011      	str	r1, [r2, #0]
 80026c2:	681d      	ldr	r5, [r3, #0]
 80026c4:	6862      	ldr	r2, [r4, #4]
 80026c6:	2100      	movs	r1, #0
 80026c8:	4628      	mov	r0, r5
 80026ca:	f000 f837 	bl	800273c <memchr>
 80026ce:	b108      	cbz	r0, 80026d4 <_printf_i+0x1bc>
 80026d0:	1b40      	subs	r0, r0, r5
 80026d2:	6060      	str	r0, [r4, #4]
 80026d4:	6863      	ldr	r3, [r4, #4]
 80026d6:	6123      	str	r3, [r4, #16]
 80026d8:	2300      	movs	r3, #0
 80026da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80026de:	e7a7      	b.n	8002630 <_printf_i+0x118>
 80026e0:	6923      	ldr	r3, [r4, #16]
 80026e2:	462a      	mov	r2, r5
 80026e4:	4639      	mov	r1, r7
 80026e6:	4630      	mov	r0, r6
 80026e8:	47c0      	blx	r8
 80026ea:	3001      	adds	r0, #1
 80026ec:	d0aa      	beq.n	8002644 <_printf_i+0x12c>
 80026ee:	6823      	ldr	r3, [r4, #0]
 80026f0:	079b      	lsls	r3, r3, #30
 80026f2:	d413      	bmi.n	800271c <_printf_i+0x204>
 80026f4:	68e0      	ldr	r0, [r4, #12]
 80026f6:	9b03      	ldr	r3, [sp, #12]
 80026f8:	4298      	cmp	r0, r3
 80026fa:	bfb8      	it	lt
 80026fc:	4618      	movlt	r0, r3
 80026fe:	e7a3      	b.n	8002648 <_printf_i+0x130>
 8002700:	2301      	movs	r3, #1
 8002702:	464a      	mov	r2, r9
 8002704:	4639      	mov	r1, r7
 8002706:	4630      	mov	r0, r6
 8002708:	47c0      	blx	r8
 800270a:	3001      	adds	r0, #1
 800270c:	d09a      	beq.n	8002644 <_printf_i+0x12c>
 800270e:	3501      	adds	r5, #1
 8002710:	68e3      	ldr	r3, [r4, #12]
 8002712:	9a03      	ldr	r2, [sp, #12]
 8002714:	1a9b      	subs	r3, r3, r2
 8002716:	42ab      	cmp	r3, r5
 8002718:	dcf2      	bgt.n	8002700 <_printf_i+0x1e8>
 800271a:	e7eb      	b.n	80026f4 <_printf_i+0x1dc>
 800271c:	2500      	movs	r5, #0
 800271e:	f104 0919 	add.w	r9, r4, #25
 8002722:	e7f5      	b.n	8002710 <_printf_i+0x1f8>
 8002724:	2b00      	cmp	r3, #0
 8002726:	d1ac      	bne.n	8002682 <_printf_i+0x16a>
 8002728:	7803      	ldrb	r3, [r0, #0]
 800272a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800272e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002732:	e76c      	b.n	800260e <_printf_i+0xf6>
 8002734:	080029c9 	.word	0x080029c9
 8002738:	080029da 	.word	0x080029da

0800273c <memchr>:
 800273c:	b510      	push	{r4, lr}
 800273e:	b2c9      	uxtb	r1, r1
 8002740:	4402      	add	r2, r0
 8002742:	4290      	cmp	r0, r2
 8002744:	4603      	mov	r3, r0
 8002746:	d101      	bne.n	800274c <memchr+0x10>
 8002748:	2300      	movs	r3, #0
 800274a:	e003      	b.n	8002754 <memchr+0x18>
 800274c:	781c      	ldrb	r4, [r3, #0]
 800274e:	3001      	adds	r0, #1
 8002750:	428c      	cmp	r4, r1
 8002752:	d1f6      	bne.n	8002742 <memchr+0x6>
 8002754:	4618      	mov	r0, r3
 8002756:	bd10      	pop	{r4, pc}

08002758 <memcpy>:
 8002758:	b510      	push	{r4, lr}
 800275a:	1e43      	subs	r3, r0, #1
 800275c:	440a      	add	r2, r1
 800275e:	4291      	cmp	r1, r2
 8002760:	d100      	bne.n	8002764 <memcpy+0xc>
 8002762:	bd10      	pop	{r4, pc}
 8002764:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002768:	f803 4f01 	strb.w	r4, [r3, #1]!
 800276c:	e7f7      	b.n	800275e <memcpy+0x6>

0800276e <memmove>:
 800276e:	4288      	cmp	r0, r1
 8002770:	b510      	push	{r4, lr}
 8002772:	eb01 0302 	add.w	r3, r1, r2
 8002776:	d807      	bhi.n	8002788 <memmove+0x1a>
 8002778:	1e42      	subs	r2, r0, #1
 800277a:	4299      	cmp	r1, r3
 800277c:	d00a      	beq.n	8002794 <memmove+0x26>
 800277e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002782:	f802 4f01 	strb.w	r4, [r2, #1]!
 8002786:	e7f8      	b.n	800277a <memmove+0xc>
 8002788:	4283      	cmp	r3, r0
 800278a:	d9f5      	bls.n	8002778 <memmove+0xa>
 800278c:	1881      	adds	r1, r0, r2
 800278e:	1ad2      	subs	r2, r2, r3
 8002790:	42d3      	cmn	r3, r2
 8002792:	d100      	bne.n	8002796 <memmove+0x28>
 8002794:	bd10      	pop	{r4, pc}
 8002796:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800279a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800279e:	e7f7      	b.n	8002790 <memmove+0x22>

080027a0 <_free_r>:
 80027a0:	b538      	push	{r3, r4, r5, lr}
 80027a2:	4605      	mov	r5, r0
 80027a4:	2900      	cmp	r1, #0
 80027a6:	d043      	beq.n	8002830 <_free_r+0x90>
 80027a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80027ac:	1f0c      	subs	r4, r1, #4
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	bfb8      	it	lt
 80027b2:	18e4      	addlt	r4, r4, r3
 80027b4:	f000 f8d0 	bl	8002958 <__malloc_lock>
 80027b8:	4a1e      	ldr	r2, [pc, #120]	; (8002834 <_free_r+0x94>)
 80027ba:	6813      	ldr	r3, [r2, #0]
 80027bc:	4610      	mov	r0, r2
 80027be:	b933      	cbnz	r3, 80027ce <_free_r+0x2e>
 80027c0:	6063      	str	r3, [r4, #4]
 80027c2:	6014      	str	r4, [r2, #0]
 80027c4:	4628      	mov	r0, r5
 80027c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80027ca:	f000 b8c6 	b.w	800295a <__malloc_unlock>
 80027ce:	42a3      	cmp	r3, r4
 80027d0:	d90b      	bls.n	80027ea <_free_r+0x4a>
 80027d2:	6821      	ldr	r1, [r4, #0]
 80027d4:	1862      	adds	r2, r4, r1
 80027d6:	4293      	cmp	r3, r2
 80027d8:	bf01      	itttt	eq
 80027da:	681a      	ldreq	r2, [r3, #0]
 80027dc:	685b      	ldreq	r3, [r3, #4]
 80027de:	1852      	addeq	r2, r2, r1
 80027e0:	6022      	streq	r2, [r4, #0]
 80027e2:	6063      	str	r3, [r4, #4]
 80027e4:	6004      	str	r4, [r0, #0]
 80027e6:	e7ed      	b.n	80027c4 <_free_r+0x24>
 80027e8:	4613      	mov	r3, r2
 80027ea:	685a      	ldr	r2, [r3, #4]
 80027ec:	b10a      	cbz	r2, 80027f2 <_free_r+0x52>
 80027ee:	42a2      	cmp	r2, r4
 80027f0:	d9fa      	bls.n	80027e8 <_free_r+0x48>
 80027f2:	6819      	ldr	r1, [r3, #0]
 80027f4:	1858      	adds	r0, r3, r1
 80027f6:	42a0      	cmp	r0, r4
 80027f8:	d10b      	bne.n	8002812 <_free_r+0x72>
 80027fa:	6820      	ldr	r0, [r4, #0]
 80027fc:	4401      	add	r1, r0
 80027fe:	1858      	adds	r0, r3, r1
 8002800:	4282      	cmp	r2, r0
 8002802:	6019      	str	r1, [r3, #0]
 8002804:	d1de      	bne.n	80027c4 <_free_r+0x24>
 8002806:	6810      	ldr	r0, [r2, #0]
 8002808:	6852      	ldr	r2, [r2, #4]
 800280a:	4401      	add	r1, r0
 800280c:	6019      	str	r1, [r3, #0]
 800280e:	605a      	str	r2, [r3, #4]
 8002810:	e7d8      	b.n	80027c4 <_free_r+0x24>
 8002812:	d902      	bls.n	800281a <_free_r+0x7a>
 8002814:	230c      	movs	r3, #12
 8002816:	602b      	str	r3, [r5, #0]
 8002818:	e7d4      	b.n	80027c4 <_free_r+0x24>
 800281a:	6820      	ldr	r0, [r4, #0]
 800281c:	1821      	adds	r1, r4, r0
 800281e:	428a      	cmp	r2, r1
 8002820:	bf01      	itttt	eq
 8002822:	6811      	ldreq	r1, [r2, #0]
 8002824:	6852      	ldreq	r2, [r2, #4]
 8002826:	1809      	addeq	r1, r1, r0
 8002828:	6021      	streq	r1, [r4, #0]
 800282a:	6062      	str	r2, [r4, #4]
 800282c:	605c      	str	r4, [r3, #4]
 800282e:	e7c9      	b.n	80027c4 <_free_r+0x24>
 8002830:	bd38      	pop	{r3, r4, r5, pc}
 8002832:	bf00      	nop
 8002834:	20000094 	.word	0x20000094

08002838 <_malloc_r>:
 8002838:	b570      	push	{r4, r5, r6, lr}
 800283a:	1ccd      	adds	r5, r1, #3
 800283c:	f025 0503 	bic.w	r5, r5, #3
 8002840:	3508      	adds	r5, #8
 8002842:	2d0c      	cmp	r5, #12
 8002844:	bf38      	it	cc
 8002846:	250c      	movcc	r5, #12
 8002848:	2d00      	cmp	r5, #0
 800284a:	4606      	mov	r6, r0
 800284c:	db01      	blt.n	8002852 <_malloc_r+0x1a>
 800284e:	42a9      	cmp	r1, r5
 8002850:	d903      	bls.n	800285a <_malloc_r+0x22>
 8002852:	230c      	movs	r3, #12
 8002854:	6033      	str	r3, [r6, #0]
 8002856:	2000      	movs	r0, #0
 8002858:	bd70      	pop	{r4, r5, r6, pc}
 800285a:	f000 f87d 	bl	8002958 <__malloc_lock>
 800285e:	4a21      	ldr	r2, [pc, #132]	; (80028e4 <_malloc_r+0xac>)
 8002860:	6814      	ldr	r4, [r2, #0]
 8002862:	4621      	mov	r1, r4
 8002864:	b991      	cbnz	r1, 800288c <_malloc_r+0x54>
 8002866:	4c20      	ldr	r4, [pc, #128]	; (80028e8 <_malloc_r+0xb0>)
 8002868:	6823      	ldr	r3, [r4, #0]
 800286a:	b91b      	cbnz	r3, 8002874 <_malloc_r+0x3c>
 800286c:	4630      	mov	r0, r6
 800286e:	f000 f863 	bl	8002938 <_sbrk_r>
 8002872:	6020      	str	r0, [r4, #0]
 8002874:	4629      	mov	r1, r5
 8002876:	4630      	mov	r0, r6
 8002878:	f000 f85e 	bl	8002938 <_sbrk_r>
 800287c:	1c43      	adds	r3, r0, #1
 800287e:	d124      	bne.n	80028ca <_malloc_r+0x92>
 8002880:	230c      	movs	r3, #12
 8002882:	4630      	mov	r0, r6
 8002884:	6033      	str	r3, [r6, #0]
 8002886:	f000 f868 	bl	800295a <__malloc_unlock>
 800288a:	e7e4      	b.n	8002856 <_malloc_r+0x1e>
 800288c:	680b      	ldr	r3, [r1, #0]
 800288e:	1b5b      	subs	r3, r3, r5
 8002890:	d418      	bmi.n	80028c4 <_malloc_r+0x8c>
 8002892:	2b0b      	cmp	r3, #11
 8002894:	d90f      	bls.n	80028b6 <_malloc_r+0x7e>
 8002896:	600b      	str	r3, [r1, #0]
 8002898:	18cc      	adds	r4, r1, r3
 800289a:	50cd      	str	r5, [r1, r3]
 800289c:	4630      	mov	r0, r6
 800289e:	f000 f85c 	bl	800295a <__malloc_unlock>
 80028a2:	f104 000b 	add.w	r0, r4, #11
 80028a6:	1d23      	adds	r3, r4, #4
 80028a8:	f020 0007 	bic.w	r0, r0, #7
 80028ac:	1ac3      	subs	r3, r0, r3
 80028ae:	d0d3      	beq.n	8002858 <_malloc_r+0x20>
 80028b0:	425a      	negs	r2, r3
 80028b2:	50e2      	str	r2, [r4, r3]
 80028b4:	e7d0      	b.n	8002858 <_malloc_r+0x20>
 80028b6:	684b      	ldr	r3, [r1, #4]
 80028b8:	428c      	cmp	r4, r1
 80028ba:	bf16      	itet	ne
 80028bc:	6063      	strne	r3, [r4, #4]
 80028be:	6013      	streq	r3, [r2, #0]
 80028c0:	460c      	movne	r4, r1
 80028c2:	e7eb      	b.n	800289c <_malloc_r+0x64>
 80028c4:	460c      	mov	r4, r1
 80028c6:	6849      	ldr	r1, [r1, #4]
 80028c8:	e7cc      	b.n	8002864 <_malloc_r+0x2c>
 80028ca:	1cc4      	adds	r4, r0, #3
 80028cc:	f024 0403 	bic.w	r4, r4, #3
 80028d0:	42a0      	cmp	r0, r4
 80028d2:	d005      	beq.n	80028e0 <_malloc_r+0xa8>
 80028d4:	1a21      	subs	r1, r4, r0
 80028d6:	4630      	mov	r0, r6
 80028d8:	f000 f82e 	bl	8002938 <_sbrk_r>
 80028dc:	3001      	adds	r0, #1
 80028de:	d0cf      	beq.n	8002880 <_malloc_r+0x48>
 80028e0:	6025      	str	r5, [r4, #0]
 80028e2:	e7db      	b.n	800289c <_malloc_r+0x64>
 80028e4:	20000094 	.word	0x20000094
 80028e8:	20000098 	.word	0x20000098

080028ec <_realloc_r>:
 80028ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028ee:	4607      	mov	r7, r0
 80028f0:	4614      	mov	r4, r2
 80028f2:	460e      	mov	r6, r1
 80028f4:	b921      	cbnz	r1, 8002900 <_realloc_r+0x14>
 80028f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80028fa:	4611      	mov	r1, r2
 80028fc:	f7ff bf9c 	b.w	8002838 <_malloc_r>
 8002900:	b922      	cbnz	r2, 800290c <_realloc_r+0x20>
 8002902:	f7ff ff4d 	bl	80027a0 <_free_r>
 8002906:	4625      	mov	r5, r4
 8002908:	4628      	mov	r0, r5
 800290a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800290c:	f000 f826 	bl	800295c <_malloc_usable_size_r>
 8002910:	42a0      	cmp	r0, r4
 8002912:	d20f      	bcs.n	8002934 <_realloc_r+0x48>
 8002914:	4621      	mov	r1, r4
 8002916:	4638      	mov	r0, r7
 8002918:	f7ff ff8e 	bl	8002838 <_malloc_r>
 800291c:	4605      	mov	r5, r0
 800291e:	2800      	cmp	r0, #0
 8002920:	d0f2      	beq.n	8002908 <_realloc_r+0x1c>
 8002922:	4631      	mov	r1, r6
 8002924:	4622      	mov	r2, r4
 8002926:	f7ff ff17 	bl	8002758 <memcpy>
 800292a:	4631      	mov	r1, r6
 800292c:	4638      	mov	r0, r7
 800292e:	f7ff ff37 	bl	80027a0 <_free_r>
 8002932:	e7e9      	b.n	8002908 <_realloc_r+0x1c>
 8002934:	4635      	mov	r5, r6
 8002936:	e7e7      	b.n	8002908 <_realloc_r+0x1c>

08002938 <_sbrk_r>:
 8002938:	b538      	push	{r3, r4, r5, lr}
 800293a:	2300      	movs	r3, #0
 800293c:	4c05      	ldr	r4, [pc, #20]	; (8002954 <_sbrk_r+0x1c>)
 800293e:	4605      	mov	r5, r0
 8002940:	4608      	mov	r0, r1
 8002942:	6023      	str	r3, [r4, #0]
 8002944:	f7fd fe96 	bl	8000674 <_sbrk>
 8002948:	1c43      	adds	r3, r0, #1
 800294a:	d102      	bne.n	8002952 <_sbrk_r+0x1a>
 800294c:	6823      	ldr	r3, [r4, #0]
 800294e:	b103      	cbz	r3, 8002952 <_sbrk_r+0x1a>
 8002950:	602b      	str	r3, [r5, #0]
 8002952:	bd38      	pop	{r3, r4, r5, pc}
 8002954:	20000154 	.word	0x20000154

08002958 <__malloc_lock>:
 8002958:	4770      	bx	lr

0800295a <__malloc_unlock>:
 800295a:	4770      	bx	lr

0800295c <_malloc_usable_size_r>:
 800295c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002960:	1f18      	subs	r0, r3, #4
 8002962:	2b00      	cmp	r3, #0
 8002964:	bfbc      	itt	lt
 8002966:	580b      	ldrlt	r3, [r1, r0]
 8002968:	18c0      	addlt	r0, r0, r3
 800296a:	4770      	bx	lr

0800296c <_init>:
 800296c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800296e:	bf00      	nop
 8002970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002972:	bc08      	pop	{r3}
 8002974:	469e      	mov	lr, r3
 8002976:	4770      	bx	lr

08002978 <_fini>:
 8002978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800297a:	bf00      	nop
 800297c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800297e:	bc08      	pop	{r3}
 8002980:	469e      	mov	lr, r3
 8002982:	4770      	bx	lr
